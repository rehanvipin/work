<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Field Manual</title>
    <link>https://work.rehanvipin.me/</link>
    <description>Recent content in Introduction on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/misc/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/d3/</guid>
      <description>Data Driven Docs? # It&amp;rsquo;s a powerful library with a bit of a learning curve.&#xA;There a heck lot of things it can do. Nice confusion. These might be some good resources:&#xA;An updated D3 tutorial (This was the best!) Official tutorial (It can take some time to get used to observableHQ&amp;rsquo;s notebooks) Huge collection of tutorials https://wattenberger.com/blog/d3#intro [SUGGESTION]: Do the d3indepth tutorial first and practise a bit by trying to make your own visualizations.</description>
    </item>
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/overview/</guid>
      <description>An overview (and miscellaneous stuff) # Angular is a platform, apparently, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.&#xA;Typescript # Angular uses TS. It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same.</description>
    </item>
    <item>
      <title>Setup</title>
      <link>https://work.rehanvipin.me/java/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/intro/</guid>
      <description>Introduction &amp;amp; Dev Setup # What is the Java platform? # The Java compiler, which defines what the Java language is and converts it to bytecode. Also a bunch of other tools which can help in development e.g., tools to inspect / decompile files. The Java Virtual Machine which executes the bytecode on the computer. This along with the classes required to run the program (i.e., standard libraries) is called the Java Runtime Environment.</description>
    </item>
    <item>
      <title>Spring Framework</title>
      <link>https://work.rehanvipin.me/spring-boot/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/spring-boot/framework/</guid>
      <description>Spring Framework # What? Why would you use it? # It is a dependency injection framework that helps you simplify your code and make it more testable. It started as an alternative to Java 2 EE and has now grown beyond it. It even includes a web framework (Web MVC) within it. Baked in with best practices so you can focus on the business problem.&#xA;It encourages you to use interfaces and helps minimize configuration code.</description>
    </item>
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/components/</guid>
      <description>The real CONTENT # Fun fact: The @Component decorator actually extends @Directive decorator because components are technically directives.&#xA;Creating them # A bare component is a class, defined in a .ts file. You can create new one like this:&#xA;Create a .ts file and export a class that is decorated by Component from @angular/core. The decorator takes in an object as argument. The object has properties like selector (which is a CSS selector to find out which HTML elements this component should apply to) and template (or templateUrl).</description>
    </item>
    <item>
      <title>Mods &amp; Packs</title>
      <link>https://work.rehanvipin.me/java/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/modules/</guid>
      <description> Modules &amp;amp; Packages # How is java code bundled up to be shared? Previously it was through packages and classpath. After project jigsaw, it is through modules.&#xA;What are they? How are they different?&#xA;Good resources for the same:&#xA;https://dev.java/learn/packages/ https://dev.java/learn/modules/ https://dev.java/learn/jlink/ </description>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://work.rehanvipin.me/misc/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/typescript/</guid>
      <description>Write JavaScript with confidence # TODO: The docs are good. Check them out: https://www.typescriptlang.org/docs/.&#xA;Some notes # declare a in TS is used to tell the compiler that the variable a is declared somewhere else and it&amp;rsquo;s usage in this file should not throw an error. (e.g. it&amp;rsquo;s declared in another file and both of them are used via script tags in HTML)&#xA;Any definitions in a class declaration are moved to the constructor when the code is transpiled to JS.</description>
    </item>
    <item>
      <title>JVM</title>
      <link>https://work.rehanvipin.me/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/jvm/</guid>
      <description> The Java Virtual Machine # It executes the bytecode apparently.&#xA;Learn more about it&amp;rsquo;s internals through these courses:&#xA;Memory Management Class Loading </description>
    </item>
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/template/</guid>
      <description>The template syntax # The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.&#xA;There are HTML attributes and there are DOM properties. Sometimes there&amp;rsquo;s a one-one mapping between them, sometimes an attribute exists but has no corresponding property and vice-versa.&#xA;Binding in HTML JS in HTML? # There are multiple ways you can use JS objects in HTML.</description>
    </item>
    <item>
      <title>Tips &amp; Tricks</title>
      <link>https://work.rehanvipin.me/misc/tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/tips-tricks/</guid>
      <description>Tips, tricks, and resources # Modern JS has many inbuilt features, not all of them are so well known. Check them out, from the stateOfJS22&#xA;Good resource &amp;amp; book on how to design modern web apps: https://www.patterns.dev/&#xA;Variable hoisting was an unintended addition that came along with function hoisting when JS was being developed. Hoisting is done by the two-scan interpreter. The first scan is to find declarations. This stackoverflow q&amp;amp;a has some good answers.</description>
    </item>
    <item>
      <title>Build tools</title>
      <link>https://work.rehanvipin.me/java/build_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/build_tools/</guid>
      <description>Building Java code # Why not just use javac ? Well, you can but tools save time because there could be:&#xA;Many Java files that need to be compiled for the main file. Incremental builds, building only the classes whose code has changed. External dependencies that need to be fetched. (Transitive dependencies! Versions!) Package code into a .jar or .jmod file. Custom arguments for compiling certain classes ? Custom arguments for running the tests.</description>
    </item>
    <item>
      <title>JavaScript execution</title>
      <link>https://work.rehanvipin.me/misc/js-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/js-execution/</guid>
      <description>How does JS run in the browser &amp;amp; node? # If you prefer visuals over text, these talks are really good (videos aren&amp;rsquo;t mine):&#xA;WTH is the Event Loop? Further Adventures of the Event Loop Jake Archibald on the Event Loop Overview # The v8 runtime provides a call stack and heap. Then in the browser, we have the WebAPIs, which provides FUNctions which can make code execute elsewhere. We have :</description>
    </item>
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/services/</guid>
      <description>Services (do STUFF) # They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: Services and DI.&#xA;According to that page linked above:&#xA;A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console</description>
    </item>
    <item>
      <title>Directives</title>
      <link>https://work.rehanvipin.me/angular/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/directives/</guid>
      <description>Directives: Hmmm &amp;hellip; # These are just classes that add extra behavior to elements ~ Angular docs.&#xA;Components are represented in HTML as elements. Directives are represented as attributes on those elements. A directive can also be applied on a simple HTML element, not just components.&#xA;Creating them # You can create a directive class in a file like nice.directive.ts like so:&#xA;import { Directive, OnInit } from &amp;#39;@angular/core&amp;#39; Directive({ selector: &amp;#39;&amp;#39; // CSS style selector e.</description>
    </item>
    <item>
      <title>Web App Architecture</title>
      <link>https://work.rehanvipin.me/misc/web-app-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/web-app-arch/</guid>
      <description>Overall design between browser &amp;amp; server # How do you serve content to a user in 2024? Well, the ways I know of are &amp;hellip;&#xA;Django, or Flask (what architectres do these promote? MVC?) Spring Boot &amp;amp; React (Single Page Apps. MVVM apparently??) Next.js (and other SSR) Hugo (Static Site Gen) Rails (MVC) Cloudflare web workers (the &amp;ldquo;serverless&amp;rdquo; design) Architectures # MVC # Model View Controller. Lots of strong opinions about this.</description>
    </item>
    <item>
      <title>Web Server</title>
      <link>https://work.rehanvipin.me/java/web-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/web-server/</guid>
      <description>Sharing stuff to browsers # Sure, you can use Spring MVC and others, but what about using something more low-level.&#xA;Jetty Server Jetty Servlet (to handle requests) Apache CXF (to implement REST APIs, compliant with JAX-RS) https://www.baeldung.com/jetty-embedded https://www.baeldung.com/introduction-to-apache-cxf https://www.baeldung.com/rest-api-jax-rs-vs-spring</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/routing/</guid>
      <description>Routing &amp;amp; Co. # Some modern apps, like the one built with Angular are Single Page Apps. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!&#xA;Creating routes # Routes are defined as an array of objects.</description>
    </item>
    <item>
      <title>Web Authentication</title>
      <link>https://work.rehanvipin.me/misc/web-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/web-auth/</guid>
      <description>Authentication in web services # How does an application figure out who is talking to it? What part of the identity of that person / system is enough?&#xA;e-mails &amp;amp; passwords are one way. WebAuthn is another. kerberos is a good option inside an enterprise. it provides a convenient SSO experience when combined with SPNEGO. session tokens passed on as cookies can also work depending on the use case.</description>
    </item>
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/forms/</guid>
      <description>Forms and validation # There are two kinds of forms in Angular:&#xA;Template based (the content and the logic is in the HTML) Model based A.K.A. Reactive (the content and logic is in the component) Creating a form # You need the FormModule from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms. When you import that module, it adds an NgForm directive to all form tags.</description>
    </item>
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/pipes/</guid>
      <description>Transforming data # Built-in pipes # You can transform data before it is rendered in a template. There are many inbuilt pipes. The format is {{ yourContent | pipeName:pipeArg1 }} where the arguments are JS objects / literals and are optional. Example: &amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;.&#xA;Custom pipe # An example pipe:&#xA;// in the file goodie.pipe.ts import {Pipe, PipeTransform} from &amp;#39;@angular/core&amp;#39; @Pipe({ name: &amp;#39;goodiepipe&amp;#39; // the name used to call the pipe in the template }) export class GoodiePipe implements PipeTransform { // this is the function that is called with the args transform(input: string, arg1: number) { if(arg1 &amp;lt; 5) return input+&amp;#34; is low&amp;#34;; return input+&amp;#34; is high&amp;#34;; } } You must then add it to the declarations of the NgModule where you want to use it.</description>
    </item>
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/di/</guid>
      <description>Adding features! 🙌 # TODO: add stuff from this: https://angular.io/guide/hierarchical-dependency-injection and try to move most of the service related stuff to the services page.&#xA;Dependency injection # This is how you provide new components with extra resources they need to function. To indicate that a class (any class, not just a component / service) has a dependency or is a dependency you decorate it with @Injectable(). From the docs</description>
    </item>
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/rxjs/</guid>
      <description>Async &amp;amp; network stuff # Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent one event that happens in the future while observables represent zero or more events that could happen synchronously or in the future.</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/test/</guid>
      <description>Unit &amp;amp; Integrated tests # NOTE : Check the reference doc regarding Testing APIs for Angular .&#xA;Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:&#xA;Isolated # Only tests the JS class not the component Mostly used for services and pipes Need to create instances of classes on your own Integrated # Tests the class and template together Mostly used for components and directives The objects are created by the framework Unit tests # They test a single unit (like a class, function, or a bunch of classes) in isolation.</description>
    </item>
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/libraries/</guid>
      <description>Ultra level reusability # They provide extra functionality to Angular. They don&amp;rsquo;t run on their own. They need to be used in an application. There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.&#xA;Angular libraries (e.g. the @angular/x ones) are NgModules.&#xA;Some functionality of an app can be packaged into a library so it can be reused with other apps. They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.</description>
    </item>
    <item>
      <title>Reactivity with Signals</title>
      <link>https://work.rehanvipin.me/angular/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/signals/</guid>
      <description>Signals # To make Angular apps more responsive. The different parts are :&#xA;Observing certain changes Listening to notifications about the changes Reacting accordingly Signals can be thought of as a combination of state and a notification mechanism.&#xA;How is that different from RxJS observables? They are a notification mechanism for events and don&amp;rsquo;t really hold state.</description>
    </item>
    <item>
      <title>/tmp</title>
      <link>https://work.rehanvipin.me/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/tmp/</guid>
      <description>Temporary code access # Random stuff that doesn&amp;rsquo;t fit anywhere else.</description>
    </item>
    <item>
      <title>/next</title>
      <link>https://work.rehanvipin.me/whatnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/whatnext/</guid>
      <description>So much to learn # These sound useful:&#xA;What to learn next # Search for &amp;ldquo;TODO&amp;rdquo; in notes and do those parts Angular has its own &amp;ldquo;learn next&amp;rdquo; page in which &amp;ldquo;schematics&amp;rdquo; seems to be something cool. RxJS and Angular Signals from this course The ExpressionChangedAfterItHasBeenCheckedError. Couple of articles one and two About change detection in Angular. one and two Angular router - https://blog.angular-university.io/angular2-router/ What really is ngModule - https://blog.</description>
    </item>
    <item>
      <title>/credits</title>
      <link>https://work.rehanvipin.me/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/credits/</guid>
      <description> Credits # Built with HUGO Uses the hugo-book theme Compass icon by Icons8 You can find the source for this site on GitHub.&#xA;A small guide to shortcodes within this theme:&#xA;Theme Guide </description>
    </item>
    <item>
      <title>theme-guide</title>
      <link>https://work.rehanvipin.me/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/shortcodes/</guid>
      <description>Buttons # Buttons are styled links that can lead to local page or external link.&#xA;Example # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}} Get Home Contribute Columns # Columns help organize shorter pieces of content horizontally for readability.&#xA;{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic separator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne.</description>
    </item>
  </channel>
</rss>
