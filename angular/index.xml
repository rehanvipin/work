<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on Field Manual</title>
    <link>https://work.rehanvipin.me/angular/</link>
    <description>Recent content in Angular on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/overview/</guid>
      <description>&lt;h1 id=&#34;an-overview-and-miscellaneous-stuff&#34;&gt;&#xA;  An overview (and miscellaneous stuff)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#an-overview-and-miscellaneous-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Angular is a platform, &#xA;  &lt;a href=&#34;https://angular.io/guide/what-is-angular&#34;&gt;apparently&lt;/a&gt;, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-bootstrap-process&#34;&gt;&#xA;  The bootstrap process&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-bootstrap-process&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first file that is run is &lt;code&gt;main.ts&lt;/code&gt; (as defined in &lt;code&gt;angular.json&lt;/code&gt;  &lt;strong&gt;That&amp;rsquo;s a very useful file&lt;/strong&gt;).&lt;/li&gt;&#xA;&lt;li&gt;It bootstraps a module, &lt;code&gt;app/module.ts&lt;/code&gt; by default.&lt;/li&gt;&#xA;&lt;li&gt;It bootstraps the root component, &lt;code&gt;app/app.component.ts&lt;/code&gt; by default.&lt;/li&gt;&#xA;&lt;li&gt;The root component is placed in &lt;code&gt;app/index.html&lt;/code&gt; which is what is rendered.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;modules-and-libraries&#34;&gt;&#xA;  Modules and libraries&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modules-and-libraries&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only the root NgModule should have a bootstrap property in its decorator.&#xA;The bootstrap property sets the root component for the app.&lt;/li&gt;&#xA;&lt;li&gt;Libraries are plain JS modules which can have angular modules.&lt;/li&gt;&#xA;&lt;li&gt;A component / directive / pipe can be declared in only one &lt;code&gt;NgModule&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;To use stuff that other module provide, you import that &lt;strong&gt;&lt;code&gt;NgModule&lt;/code&gt;&lt;/strong&gt; in this &lt;code&gt;NgModule&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;When you list services in the providers array, they are available app wide.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s possible to have multiple entry point components in the &lt;code&gt;bootstrap&lt;/code&gt; array.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;file-structure-of-workspace&#34;&gt;&#xA;  File structure of workspace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-structure-of-workspace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;deployment-&#34;&gt;&#xA;  Deployment ðŸŽˆ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deployment-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is done with the &lt;code&gt;ng build&lt;/code&gt; command which:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/components/</guid>
      <description>&lt;h1 id=&#34;the-real-content&#34;&gt;&#xA;  The real CONTENT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-real-content&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Fun fact: The &lt;code&gt;@Component&lt;/code&gt; decorator actually extends &lt;code&gt;@Directive&lt;/code&gt; decorator because components are &lt;em&gt;technically&lt;/em&gt; directives.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A bare component is a class, defined in a .ts file. You can create new one like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a &lt;code&gt;.ts&lt;/code&gt; file and export a class that is decorated by &lt;code&gt;Component&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;. The decorator takes in an object as argument.&#xA;The object has properties like &lt;code&gt;selector&lt;/code&gt; (which is a CSS selector to find out which HTML elements this component should apply to) and &lt;code&gt;template&lt;/code&gt; (or &lt;code&gt;templateUrl&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Import this class in &lt;code&gt;app.module.ts&lt;/code&gt; and add it to declarations in the &lt;code&gt;NgModule&lt;/code&gt; decorator of AppModule.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Data binding: Accessing the component&amp;rsquo;s properties within its template via the &lt;code&gt;{{ any JS expression }}&lt;/code&gt; syntax.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/template/</guid>
      <description>&lt;h1 id=&#34;the-template-syntax&#34;&gt;&#xA;  The template syntax&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-template-syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.&lt;/p&gt;&#xA;&lt;p&gt;There are HTML attributes and there are DOM properties. Sometimes there&amp;rsquo;s a one-one mapping between them,&#xA;sometimes an attribute exists but has no corresponding property and vice-versa.&lt;/p&gt;&#xA;&lt;details &gt;&#xA;  &lt;summary&gt;Binding in HTML&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    &lt;h2 id=&#34;js-in-html&#34;&gt;&#xA;  JS in HTML?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#js-in-html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;There are multiple ways you can use JS objects in HTML. Two of them are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/services/</guid>
      <description>&lt;h1 id=&#34;services-do-stuff&#34;&gt;&#xA;  Services (do STUFF)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#services-do-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: &#xA;  &lt;a href=&#34;https://angular.io/guide/architecture-services&#34;&gt;Services and DI&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;According to that page linked above:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You usually create one in a &lt;code&gt;.service.ts&lt;/code&gt; file. It is an exported class with functions which perform the required business actions. It can then be &lt;strong&gt;injected&lt;/strong&gt; into the required classes. It might depend on other services too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directives</title>
      <link>https://work.rehanvipin.me/angular/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/directives/</guid>
      <description>&lt;h1 id=&#34;directives-hmmm-&#34;&gt;&#xA;  Directives: Hmmm &amp;hellip;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#directives-hmmm-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are just classes that add extra behavior to elements ~ Angular docs.&lt;/p&gt;&#xA;&lt;p&gt;Components are represented in HTML as elements. Directives are represented as attributes on those elements. A directive can also be applied on a simple HTML element, not just components.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can create a directive class in a file like &lt;code&gt;nice.directive.ts&lt;/code&gt; like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;OnInit&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// CSS style selector e.g. [nice-stuff]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the HTML would be like &amp;lt;somecomp nice-stuff&amp;gt;&amp;lt;/somecomp&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NiceDirective&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They need to be added to the declaration section of the ngModule where they will be used. They can get a reference to the element they were used on via the &lt;code&gt;ElementRef&lt;/code&gt; service which can be added as a dependency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/routing/</guid>
      <description>&lt;h1 id=&#34;routing--co&#34;&gt;&#xA;  Routing &amp;amp; Co.&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#routing--co&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Some modern apps, like the one built with Angular are &lt;strong&gt;Single Page Apps&lt;/strong&gt;. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-routes&#34;&gt;&#xA;  Creating routes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-routes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Routes are defined as an array of objects. The array is of the type &lt;code&gt;Routes&lt;/code&gt; from &amp;ldquo;@angular/router&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/forms/</guid>
      <description>&lt;h1 id=&#34;forms-and-validation&#34;&gt;&#xA;  Forms and validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forms-and-validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are two kinds of forms in Angular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Template based (the content and the logic is in the HTML)&lt;/li&gt;&#xA;&lt;li&gt;Model based A.K.A. Reactive (the content and logic is in the component)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;creating-a-form&#34;&gt;&#xA;  Creating a form&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-a-form&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You need the &lt;code&gt;FormModule&lt;/code&gt; from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms.&lt;/li&gt;&#xA;&lt;li&gt;When you import that module, it adds an NgForm directive to all form tags.&#xA;The directive instance can be accessed as described below.&lt;/li&gt;&#xA;&lt;li&gt;In the component with the form, on the form element, set a template reference variable like so: &lt;code&gt;&amp;lt;form #someNiceNameForForm=&amp;quot;ngForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;.&#xA;This provides additional functionality as &#xA;  &lt;a href=&#34;https://angular.io/guide/template-reference-variables#using-ngform-with-template-variables&#34;&gt;described in the docs&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For each input element whose value you want, set the &lt;code&gt;name&lt;/code&gt; attribute. This will be the key to access its value later on.&lt;/li&gt;&#xA;&lt;li&gt;For the submit action, prefer to bind to ngSubmit instead of using the submit button, like so: &lt;code&gt;&amp;lt;form #formTempVar=&amp;quot;ngForm&amp;quot; (ngSubmit)=&amp;quot;handlerFunc(formTempVar.value)&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;value&lt;/code&gt; prop. on the temp-ref-var is an object where the value for each input field with a name attr. is available.&lt;/li&gt;&#xA;&lt;li&gt;You can also bind &lt;code&gt;ngModel&lt;/code&gt; (which is a directive) on each input element to bind it to values&#xA;on the component, like so: &lt;code&gt;&amp;lt;input (ngModel)=&amp;quot;compoProp&amp;quot; id=&amp;quot;foo&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;.&#xA;To achieve &lt;strong&gt;two way data binding&lt;/strong&gt; you can do this: &lt;code&gt;[(ngModel)]=&amp;quot;compoProp&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;validation&#34;&gt;&#xA;  Validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Angular turns off the default behaviour of adding the &amp;ldquo;required&amp;rdquo; attribute on input elements. It does provide its own validation features:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/pipes/</guid>
      <description>&lt;h1 id=&#34;transforming-data&#34;&gt;&#xA;  Transforming data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transforming-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;built-in-pipes&#34;&gt;&#xA;  Built-in pipes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#built-in-pipes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can transform data before it is rendered in a template. There are many &#xA;  &lt;a href=&#34;https://angular.io/api/common#pipes&#34;&gt;inbuilt pipes&lt;/a&gt;. The format is &lt;code&gt;{{ yourContent | pipeName:pipeArg1 }}&lt;/code&gt; where the arguments are JS objects / literals and are optional. Example: &lt;code&gt;&amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;custom-pipe&#34;&gt;&#xA;  Custom pipe&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#custom-pipe&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;An example pipe:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the file goodie.pipe.ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Pipe&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goodiepipe&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the name used to call the pipe in the template&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GoodiePipe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this is the function that is called with the args&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is low&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is high&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must then add it to the &lt;code&gt;declarations&lt;/code&gt; of the NgModule where you want to use it. It can then be used like so: &lt;code&gt;{{ someVar | goodpipe:32 }}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/di/</guid>
      <description>&lt;h1 id=&#34;adding-features-&#34;&gt;&#xA;  Adding features! ðŸ™Œ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#adding-features-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dependency-injection&#34;&gt;&#xA;  Dependency injection&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dependency-injection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is how you provide new components with extra resources they need to function. To indicate that a class (&lt;strong&gt;any class&lt;/strong&gt;, not just a component / service) has a dependency or is a dependency you decorate it with &lt;code&gt;@Injectable()&lt;/code&gt;. From the docs&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The injector is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don&amp;rsquo;t have to create injectors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/rxjs/</guid>
      <description>&lt;h1 id=&#34;async--network-stuff&#34;&gt;&#xA;  Async &amp;amp; network stuff&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#async--network-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent &lt;strong&gt;one event that happens in the future&lt;/strong&gt; while observables represent &lt;strong&gt;zero or more events that could happen synchronously or in the future&lt;/strong&gt;. This particular section is about RxJS and HTTP in Angular.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/test/</guid>
      <description>&lt;h1 id=&#34;unit--integrated-tests&#34;&gt;&#xA;  Unit &amp;amp; Integrated tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit--integrated-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;NOTE : Check the &#xA;  &lt;a href=&#34;https://angular.dev/guide/testing/utility-apis&#34;&gt;reference doc&lt;/a&gt; regarding&#xA;Testing APIs for Angular .&lt;/p&gt;&#xA;&lt;p&gt;Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:&lt;/p&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;isolated&#34;&gt;&#xA;  Isolated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#isolated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only tests the JS class not the component&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for services and pipes&lt;/li&gt;&#xA;&lt;li&gt;Need to create instances of classes on your own&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;integrated&#34;&gt;&#xA;  Integrated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#integrated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tests the class and template together&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for components and directives&lt;/li&gt;&#xA;&lt;li&gt;The objects are created by the framework&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;unit-tests&#34;&gt;&#xA;  Unit tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;They test a single unit (like a class, function, or a bunch of classes) in isolation. Some features of unit tests:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/libraries/</guid>
      <description>&lt;h1 id=&#34;ultra-level-reusability&#34;&gt;&#xA;  Ultra level reusability&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ultra-level-reusability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They provide extra functionality to Angular.&#xA;They don&amp;rsquo;t run on their own. They need to be used in an application.&#xA;There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Angular libraries (e.g. the @angular/x ones) are &lt;code&gt;NgModules&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some functionality of an app can be packaged into a library so it can be reused with other apps.&#xA;They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactivity with Signals</title>
      <link>https://work.rehanvipin.me/angular/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/signals/</guid>
      <description>&lt;h1 id=&#34;signals&#34;&gt;&#xA;  Signals&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#signals&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Apparently, it is used to make Angular apps more responsive and improve Change Detection.&lt;/p&gt;&#xA;&lt;p&gt;Signals can be thought of as a combination of state and a notification mechanism for changes to that state.&lt;/p&gt;&#xA;&lt;p&gt;How is that different from RxJS observables?&#xA;Observables are a notification mechanism for &lt;em&gt;events&lt;/em&gt; and don&amp;rsquo;t really hold state.&lt;br&gt;&#xA;What about Subjects then?? Well, they are similar, but state management code is simpler with signals (based on trials).&lt;br&gt;&#xA;One such benefit is that there is no need to manually &amp;ldquo;complete&amp;rdquo; &amp;amp; &amp;ldquo;unsubscribe&amp;rdquo;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
