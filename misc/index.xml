<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fun Stuff on Field Manual</title>
    <link>https://work.rehanvipin.me/misc/</link>
    <description>Recent content in Fun Stuff on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/misc/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/d3/</guid>
      <description>&lt;h1 id=&#34;data-driven-docs&#34;&gt;&#xA;  Data Driven Docs?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-driven-docs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a powerful library with a bit of a learning curve.&lt;/p&gt;&#xA;&lt;p&gt;There a heck lot of things it can do. Nice confusion.&#xA;These might be some good resources:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.d3indepth.com/&#34;&gt;An updated D3 tutorial&lt;/a&gt; (This was the best!)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://observablehq.com/@d3/learn-d3&#34;&gt;Official tutorial&lt;/a&gt;&#xA;(It can take some time to get used to observableHQ&amp;rsquo;s notebooks)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34;&gt;Huge collection of tutorials&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://wattenberger.com/blog/d3#intro&#34;&gt;https://wattenberger.com/blog/d3#intro&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[SUGGESTION]: Do the d3indepth tutorial first and practise a bit by trying to make your own visualizations.&#xA;The other resources can be useful when you&amp;rsquo;re stuck.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://work.rehanvipin.me/misc/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/typescript/</guid>
      <description>&lt;h1 id=&#34;write-javascript-with-confidence&#34;&gt;&#xA;  Write JavaScript with confidence&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#write-javascript-with-confidence&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The docs are good. Check them out: &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/docs/&#34;&gt;https://www.typescriptlang.org/docs/&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same. You can try it out &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/play&#34;&gt;online&lt;/a&gt;. Its main features are:&lt;/p&gt;&#xA;&lt;h3 id=&#34;static-typing&#34;&gt;&#xA;  Static typing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#static-typing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;You can declare types while declaring variables, like so: &lt;code&gt;let var: number;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tips &amp; Tricks</title>
      <link>https://work.rehanvipin.me/misc/tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/tips-tricks/</guid>
      <description>&lt;h1 id=&#34;tips-tricks-and-resources&#34;&gt;&#xA;  Tips, tricks, and resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tips-tricks-and-resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Modern JS has many inbuilt features, not all of them are so well known.&#xA;&#xA;  &lt;a href=&#34;https://2022.stateofjs.com/en-US/features/language/&#34;&gt;Check them out, from the stateOfJS22&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Good resource &amp;amp; book on how to design modern web apps: &#xA;  &lt;a href=&#34;https://www.patterns.dev/&#34;&gt;https://www.patterns.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variable hoisting was an unintended addition that came along with function hoisting when JS was&#xA;being developed. Hoisting is done by the two-scan interpreter. The first scan is to find declarations.&#xA;This &#xA;  &lt;a href=&#34;https://stackoverflow.com/questions/15005098/why-does-javascript-hoist-variables&#34;&gt;stackoverflow q&amp;amp;a&lt;/a&gt; has some good answers.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s no concept of &amp;ldquo;initialization&amp;rdquo; in JS.&#xA;There is declaration (&lt;code&gt;let a&lt;/code&gt;) and there is assignment (&lt;code&gt;a = 2&lt;/code&gt;).&#xA;&amp;ldquo;Definition&amp;rdquo; is just syntax sugar to do both declaration and assignment at once.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;typeof null&lt;/code&gt; evaluates to &lt;code&gt;&#39;object&#39;&lt;/code&gt; in JS. &#xA;  &lt;a href=&#34;http://crockford.com/javascript/remedial.html&#34;&gt;Which is a bug apparently&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;While writing the CSS for a site, it&amp;rsquo;s a good idea to write it mobile first and then add&#xA;media queries for the larger screen sizes. It leads to less CSS. Even if the design was desktop based.&lt;/li&gt;&#xA;&lt;li&gt;JS has so many inbuilt things. &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;Proxy&lt;/a&gt; is one of them.&lt;/li&gt;&#xA;&lt;li&gt;Want to know if you&amp;rsquo;ve covered all best-practices and stuff for your web app?&#xA;There&amp;rsquo;s a nice &#xA;  &lt;a href=&#34;https://frontendchecklist.io&#34;&gt;checklist&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;A book about building &#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal&#34;&gt;web apps&lt;/a&gt; by Basecamp. It&amp;rsquo;s good apparently.&#xA;&#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal/getting-real.pdf&#34;&gt;PDF&lt;/a&gt; also available.&lt;/li&gt;&#xA;&lt;li&gt;Confused about what units to use in CSS? &#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=N5wpD9Ov_To&#34;&gt;Check out this video by Kevin Powell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use &lt;code&gt;rem&lt;/code&gt; (i.e., root el) for fonts and most other things. It&amp;rsquo;s relative to the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; (which is 16px by default)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the element it is on or the closest parent which has defined a font size. When it&amp;rsquo;s used for some other property, it only references this element&amp;rsquo;s font-size. It can be useful for padding and margins.&lt;/li&gt;&#xA;&lt;li&gt;Use percentages for &lt;code&gt;width&lt;/code&gt; (prefer to use &lt;code&gt;max-width&lt;/code&gt;) or &lt;code&gt;ch&lt;/code&gt; (equal to width of a char) when operating on a text container&lt;/li&gt;&#xA;&lt;li&gt;Think twice before setting &lt;code&gt;height&lt;/code&gt;. Try to set &lt;code&gt;min-height&lt;/code&gt; if it is really needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Try to keep text confined to 60 chars a row.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s an &lt;strong&gt;open source&lt;/strong&gt; design tool: &#xA;  &lt;a href=&#34;https://penpot.app&#34;&gt;Penpot&lt;/a&gt; which focuses on web standards&lt;/li&gt;&#xA;&lt;li&gt;The word &amp;ldquo;JavaScript&amp;rdquo; is trademarked by Oracle (&#xA;  &lt;a href=&#34;https://tinyclouds.org/trademark&#34;&gt;https://tinyclouds.org/trademark&lt;/a&gt;) as of Sept. 2022&lt;/li&gt;&#xA;&lt;li&gt;An easy way to locally deploy the built application is to run: &lt;code&gt;python -m http.server --bind localhost 8080&lt;/code&gt; which serves the current directory at &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a slight imperfection in the microsoft logo on black backgrounds&#xA;where the red box seems to appear larger than the blue box below it. This is due to the way pixels&#xA;are arranged in a display. &#xA;  &lt;a href=&#34;https://www.avforums.com/threads/anyone-else-have-an-offset-blue-and-red-square-on-the-microsoft-logo-of-office-2019.2310709/&#34;&gt;See it in more detail here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Want to see what are the new features in es6 and how many of them could be done in previous versions? This &#xA;  &lt;a href=&#34;http://es6-features.org/#Constants&#34;&gt;website&lt;/a&gt; lets you do that.&lt;/li&gt;&#xA;&lt;li&gt;Reference for JavaScript and some practice exercises : &#xA;  &lt;a href=&#34;https://wesbos.com/javascript&#34;&gt;https://wesbos.com/javascript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Browsers now have better client side functioning capabilities. Such as &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&#34;&gt;a proper DB&lt;/a&gt;, &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system&#34;&gt;virtualfile system&lt;/a&gt;, and even &#xA;  &lt;a href=&#34;https://webcontainers.io/&#34;&gt;running full programs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Snowflake</title>
      <link>https://work.rehanvipin.me/misc/snowflake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/snowflake/</guid>
      <description>&lt;h1 id=&#34;snowflake-the-enterprise-data-warehouse&#34;&gt;&#xA;  Snowflake, the enterprise data warehouse&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#snowflake-the-enterprise-data-warehouse&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Not exactly. It&amp;rsquo;s a cloud data platform apparently.&lt;/p&gt;&#xA;&lt;p&gt;Why would you need it? Otherwise, an org can have so many DBs across departments,&#xA;with lots of data duplication and lesser opportunities for high level analysis across systems.&#xA;Also, it is cloud native and doesn&amp;rsquo;t expose any hardware aspects to the users. Less SRE work.&lt;/p&gt;&#xA;&lt;p&gt;Apparently, the on-prem structure of past solutions were not scalable and were expensive.&#xA;Snowflake uses AWS, Azure, or GCP, and is a much more scalable solution,&#xA;with separate scaling for storage and compute. It has a pay-as-you-go model. (Like AWS billing).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://work.rehanvipin.me/misc/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/git/</guid>
      <description>&lt;h1 id=&#34;git---version-control-system&#34;&gt;&#xA;  Git - Version Control System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git---version-control-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Understanding the fundamentals &amp;amp; inner model of git to be able to better work with it.&lt;/p&gt;&#xA;&lt;p&gt;This should be a good learning resource : &#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/how-git-works/table-of-contents&#34;&gt;How Git Works&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;storing-data&#34;&gt;&#xA;  Storing data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#storing-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;How does git store data?&#xA;The raw data, AKA blobs, are stored in the .git/objects directory along with some metadata in a compresssed format. They are addressed by SHA-1 hashes.&#xA;Blobs are one type of object. Others being commits, and trees.&#xA;It&amp;rsquo;s possible to store a new blob by doing &lt;code&gt;git hash-object path-to-the-file-containing-data -w&lt;/code&gt;.&#xA;You can find out the type of any object by doing &lt;code&gt;git cat-file the-hash-of-the-objkt -t&lt;/code&gt;, and print the file by doing &lt;code&gt;git cat-file the-hash-of-the-objkt -p&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
