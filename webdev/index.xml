<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on Field Manual</title>
    <link>https://work.rehanvipin.me/webdev/</link>
    <description>Recent content in Web Development on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/webdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML</title>
      <link>https://work.rehanvipin.me/webdev/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/html/</guid>
      <description>&lt;h1 id=&#34;html&#34;&gt;&#xA;  HTML&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Notes made while studying this&#xA;&#xA;  &lt;a href=&#34;https://www.freecodecamp.org/learn/responsive-web-design/&#34;&gt;freeCodeCamp certification for responsive web design&lt;/a&gt; and more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-html-and-html5&#34;&gt;&#xA;  Basic HTML and HTML5&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-html-and-html5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a convention to write all HTML tags in lowercase.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Fancy new HTML5 tags : &lt;code&gt;main&lt;/code&gt; inside which you can put other elements. These are supposed to be the &amp;ldquo;main&amp;rdquo; elements from an SEO standpoint.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All &lt;code&gt;img&lt;/code&gt; tags must have the alt attribute. The &lt;code&gt;img&lt;/code&gt; tag is a type of self-closing tag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS</title>
      <link>https://work.rehanvipin.me/webdev/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/css/</guid>
      <description>&lt;h1 id=&#34;cascading-style-sheets&#34;&gt;&#xA;  Cascading Style Sheets&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cascading-style-sheets&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;notes-from-course&#34;&gt;&#xA;  Notes from course&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#notes-from-course&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Web fonts can be downloaded onto the user&amp;rsquo;s browser if your website requires them. This is done by defining the font in CSS, e.g. in the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. The rule is specified as :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#66d9ef&#34;&gt;font-face&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open Sans&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/fonts/OpenSans-Regular-webfont.woff2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;woff2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/fonts/OpenSans-Regular-webfont.woff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;woff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This whole thing can be importing it as a style sheet using the &lt;code&gt;link&lt;/code&gt; tag within the &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Along with fonts like that there are also &amp;ldquo;Generic fonts&amp;rdquo; which are present in all browsers. When specifying generic font names you don&amp;rsquo;t need quotes since they are CSS keywords. E.g. Helvetica.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS</title>
      <link>https://work.rehanvipin.me/webdev/js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/js/</guid>
      <description>&lt;h1 id=&#34;javascript&#34;&gt;&#xA;  JavaScript&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#javascript&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Notes from the freeCodeCamp &amp;ldquo;JavaScript Algorithms and Data Structures&amp;rdquo; course and more&lt;/p&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;&#xA;  Basics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variable names in JS can contain $, _, letters, and numbers but cannot start with a number.&#xA;Declaring a variable without initalizing it will make it an &lt;code&gt;undefined&lt;/code&gt; type object and it will have the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;People like writing JS variable names in camelCase.&lt;/li&gt;&#xA;&lt;li&gt;Variables declared with &lt;code&gt;var&lt;/code&gt; can be declared multiple times.&#xA;Trying to re-declare a variable declared with &lt;code&gt;let&lt;/code&gt; results in a SyntaxError. &lt;code&gt;const&lt;/code&gt; is like &lt;code&gt;let&lt;/code&gt; but the variable is read-only.&lt;/li&gt;&#xA;&lt;li&gt;JS has the &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; increment and decrement operators.&#xA;The &lt;code&gt;%&lt;/code&gt; in JS is not a modulo operator, it&amp;rsquo;s a remainder operator and can return negative remainders.&lt;/li&gt;&#xA;&lt;li&gt;Values of type &lt;code&gt;String&lt;/code&gt; are immutable. Like Python.&lt;/li&gt;&#xA;&lt;li&gt;Constant variables cannot have their value changed, they cannot be re-declared or re-assigned a different value.&#xA;In this case : &lt;code&gt;const a = [1, 2, 3]&lt;/code&gt;, the variable &lt;code&gt;a&lt;/code&gt; holds the reference to the array (since it is not a primitive type).&#xA;Therefore the array itself can be modified (e.g. &lt;code&gt;a.push(1)&lt;/code&gt; or &lt;code&gt;a[2] = 7&lt;/code&gt;) since the reference won&amp;rsquo;t change and the &amp;ldquo;const-ness&amp;rdquo; still holds.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;push&lt;/code&gt; function of an &lt;code&gt;array&lt;/code&gt; takes in one or more arguments and appends them to the end of the array.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; and &lt;code&gt;unshift&lt;/code&gt; remove and add values to the beginning to the start of the array&#xA;just like &lt;code&gt;pop&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; do to the end of the array.&lt;/li&gt;&#xA;&lt;li&gt;If a variable is declared without &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; it will have global scope regardless of where it is declared.&#xA;&lt;strong&gt;Explanation&lt;/strong&gt;: &#xA;  &lt;a href=&#34;http://blog.niftysnippets.org/2008/03/horror-of-implicit-globals.html&#34;&gt;There aren&amp;rsquo;t any &amp;ldquo;global variables&amp;rdquo; in JS&lt;/a&gt;&#xA;(They are there when declared by &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;).&#xA;When you do &lt;code&gt;wowNiceGlobal = 5&lt;/code&gt; where &lt;code&gt;wowNiceGlobal&lt;/code&gt; is being referenced for the first time thus making it a &amp;ldquo;global variable&amp;rdquo;&#xA;and giving it global scope, it really just creates and assigns to a property (with the same name) of &lt;strong&gt;the&lt;/strong&gt; global object.&#xA;In a browser, the &lt;code&gt;window&lt;/code&gt; variable is a reference to the global object.&#xA;You can stop this property setting from happening by adding &amp;ldquo;use strict&amp;rdquo; to your code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scope&lt;/strong&gt;. A variable, declared with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; at the top level of your code is given global scope. &lt;code&gt;var&lt;/code&gt; has a function scope. If a &lt;code&gt;var&lt;/code&gt; variable is defined in some block in a function it will be available throughout the function. &lt;code&gt;let&lt;/code&gt; is block scoped. It does not exist outside the block. Within their scopes both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; variables are &amp;ldquo;hoisted&amp;rdquo;. This means they are defined at the top of their scopes. &lt;code&gt;var&lt;/code&gt; variables are initialized with &lt;code&gt;undefined&lt;/code&gt; while &lt;code&gt;let&lt;/code&gt; variables are not initialized and will cause a ReferenceError if you try to access them. &lt;code&gt;const&lt;/code&gt; has the same scoping rules as &lt;code&gt;let&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;==&lt;/code&gt; operator will perform type coercion if the operands aren&amp;rsquo;t of the same type. The &lt;code&gt;===&lt;/code&gt; operator doesn&amp;rsquo;t convert types and will return false if the types are different. Like that there are also the &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; operators.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Type Coercion&lt;/strong&gt;. Primitive types are &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;symbol&lt;/code&gt;(new, added in ES6). Using &#xA;  &lt;a href=&#34;https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/&#34;&gt;this article about type coercion for reference&lt;/a&gt; we see that you can explicitly convert and that the only implicit conversion allowed (for primitives and others) is &amp;ldquo;to string&amp;rdquo;, &amp;ldquo;to number&amp;rdquo;, and &amp;ldquo;to boolean&amp;rdquo;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Boolean conversion happens with logical operators (but the result of the expression is still the original type). Objects are always truthy values.&lt;/li&gt;&#xA;&lt;li&gt;String conversion happens with the &lt;code&gt;+&lt;/code&gt; operator when either operands are of the string type.&lt;/li&gt;&#xA;&lt;li&gt;Number and object conversions are complex. Must check the blog post.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;In a switch statement, once a case has been matched, all statements from there on are executed till a break is encountered (regardless of curly braces). Cases are matched with &lt;code&gt;===&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Objects&lt;/strong&gt;. They are a collection of key: value elements. The keys are called properties. All properties are converted to a string and stored. You can access values of properties of objects via &lt;code&gt;.&lt;/code&gt; (in case the property string is also a valid identifier) or &lt;code&gt;[]&lt;/code&gt; (works for all properties).&lt;/li&gt;&#xA;&lt;li&gt;You can &lt;strong&gt;delete properties&lt;/strong&gt; from objects. Just add the keyword &lt;code&gt;delete&lt;/code&gt; before accessing the property either via the dot notation or bracket notation.&lt;/li&gt;&#xA;&lt;li&gt;To check if an object has a property, use this function: &lt;code&gt;objkt.hasOwnProperty(propname)&lt;/code&gt; which returns a boolean value.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;while&lt;/code&gt; loop and the &lt;code&gt;for&lt;/code&gt; loops are like C&amp;rsquo;s. The &lt;code&gt;do{}while()&lt;/code&gt; loop too.&lt;/li&gt;&#xA;&lt;li&gt;The RNG for JS is &lt;code&gt;Math.random&lt;/code&gt; which returns numbers in the range [0, 1).&lt;/li&gt;&#xA;&lt;li&gt;When you have a variable of the Function type you can check how many args it takes&#xA;using &lt;code&gt;varName.length&lt;/code&gt; and find out the function name using &lt;code&gt;varName.name&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;es6-modern-javascript&#34;&gt;&#xA;  ES6 (Modern JavaScript)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#es6-modern-javascript&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can prevent an object from being modified by passing it to &lt;code&gt;Object.freeze(objkt)&lt;/code&gt; (Not by making a &lt;code&gt;const&lt;/code&gt; object).&lt;/li&gt;&#xA;&lt;li&gt;You can extend an array (a1) with another array (a2) by using &lt;code&gt;arr1.concat(arr2)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Variable argument functions are possible using the rest parameter.&#xA;You specify a parameter as &lt;code&gt;...paraName&lt;/code&gt; and when you pass multiple arguments they are all available in array with that name (paraName here).&#xA;This is the preffered method over using the &lt;code&gt;arguments&lt;/code&gt; object that&amp;rsquo;s available for all non-arrow functions.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, there is the &amp;ldquo;spread&amp;rdquo; operator to unpack an array into multiple elements, this can be useful when the function expects multiple parameters instead of an array. It follows the same syntax. Given an array arr, you can do &lt;code&gt;console.log(...arr)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The object destructuring operator is a clean shortcut to extract multiple values from an object at once. The most basic way to do it is : &lt;code&gt;{param1, param2} = objkt&lt;/code&gt;. Suppose you want to use variables of different names you can do this : &lt;code&gt;{&amp;quot;param1&amp;quot;: var1, &amp;quot;param2&amp;quot;: var2} = objkt&lt;/code&gt;. Nested objects call for nested destructuring. You can destructure in the function arguments.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, there is also array destructuring. You can unpack particular values from the array. Like so, &lt;code&gt;[a, b,,,, c, d,, e] = [1,2,3,4,5,6,7,8,9,0]&lt;/code&gt;. For the last elements, you can also unpack them into a separate array using the rest operator. So if you want a new array but without the first 4 values you would do : &lt;code&gt;[,,,, ...new_arr] = arr&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Format strings are available as template literals. They are used as ` any text `. In a template literal you use &lt;code&gt;${ any expression }&lt;/code&gt; to place run-time values. They preserve all whitespace.&lt;/li&gt;&#xA;&lt;li&gt;There is also a shorthand for creating objects. You can just do &lt;code&gt;{x, y}&lt;/code&gt;. The keys will be &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (in string format) respectively.&lt;/li&gt;&#xA;&lt;li&gt;When defining functions in objects you can omit the &lt;code&gt;function&lt;/code&gt; keyword and just do &lt;code&gt;prop_name(arg1, arg2){}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can use the &lt;code&gt;class&lt;/code&gt; keyword to have a &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods, and you can create an object of that type with &lt;code&gt;new className(constructor args)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can make the variables, functions, and whatnot of one JS file available to others by &amp;ldquo;exporting&amp;rdquo; it. You do this by either adding the &lt;code&gt;export&lt;/code&gt; keyword to it during delcaration or later on, where you can export multiple vars like &lt;code&gt;export {var1, func1, var2}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;To make use of them in another file you can &amp;ldquo;import&amp;rdquo; them like this : &lt;code&gt;import {var2, func1} from &amp;quot;relative_path_to_other_js_file&amp;quot;&lt;/code&gt;. Or you can import everything from that file and place it under an object like this : &lt;code&gt;import * as containah from &amp;quot;that_other_file&amp;quot;&lt;/code&gt;. Then access them like &lt;code&gt;containah.var1&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;There are also &amp;ldquo;default exports&amp;rdquo;. This means that you can have one export which is the default thing that will be imported from a file when you do this : &lt;code&gt;import something from &amp;quot;file&amp;quot;&lt;/code&gt;. To set something as a default export you can do &lt;code&gt;export default var&lt;/code&gt;. They are useful when a file represents one item and you want to import that in some other file. It isn&amp;rsquo;t particulary useful when a file is meant to do multiple things and has multiple items.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;new operator&lt;/strong&gt; can be used to create objects from &lt;strong&gt;functions&lt;/strong&gt; or &lt;strong&gt;classes&lt;/strong&gt;. To use it with a function the function must act like a constructor and set properties to &lt;code&gt;this&lt;/code&gt;. To use it with a class, the class must have a constructor.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Promise&lt;/strong&gt; is a feature to execute code asynchronously. You can create a &lt;code&gt;Promise&lt;/code&gt; object with the &lt;code&gt;Promise&lt;/code&gt; function. It expects you to take in two arguments (both of which are callbacks). As a convention we create a new promise object like this : &lt;code&gt;let prms = new Promise((resolve, reject) =&amp;gt; {});&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;A promise can be in one of three states: &lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;fulfilled&lt;/code&gt;, and &lt;code&gt;failed&lt;/code&gt;. It is &lt;code&gt;pending&lt;/code&gt; when the promise is created, &lt;code&gt;fulfilled&lt;/code&gt; when the &lt;code&gt;resolve&lt;/code&gt; function is called, and &lt;code&gt;failed&lt;/code&gt; when the &lt;code&gt;reject&lt;/code&gt; function is called. Both &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; take one argument each.&lt;/li&gt;&#xA;&lt;li&gt;You can set hanlders for a promise by calling &lt;code&gt;.then(resolveFunc, rejectFunc)&lt;/code&gt; or &lt;code&gt;.catch(rejectFunc)&lt;/code&gt;.&#xA;You can pass a function &lt;code&gt;resolveFunc&lt;/code&gt; (executed when the promise enters the &amp;ldquo;fulfilled&amp;rdquo; state)&#xA;which takes one argument, i.e. the value passed to &lt;code&gt;resolve&lt;/code&gt;.&#xA;You could also pass the &lt;code&gt;rejectFunc&lt;/code&gt; (executed when the promise enters the &amp;ldquo;failed&amp;rdquo; state)&#xA;that takes in one argument i.e., the value passed to &lt;code&gt;reject&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;To collect multiple promises into one there&amp;rsquo;s the &lt;code&gt;Promise.All&lt;/code&gt; function which takes in an iterable and returns a promise which&#xA;resolves with an iterable of all resolved values of input promises or rejects when any of the input promises reject.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s possible to have multiple handlers for a promise. e.g., &lt;code&gt;prms.then(() =&amp;gt; {alert(1);}); prms.then(() =&amp;gt; {alert(2);});&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s also possible to chain handlers because &lt;code&gt;.then()&lt;/code&gt; returns an object which the &lt;code&gt;.catch&lt;/code&gt; and &lt;code&gt;.then&lt;/code&gt; functions.&#xA;Therefore you could do&#xA;&lt;code&gt;prms.then(rsVal =&amp;gt; new Promise((rs, rj) =&amp;gt; rs(1)).then(rsVal =&amp;gt; new Promise((rs, rj) =&amp;gt; rs(3))).catch(rjVal =&amp;gt; console.log(rjVal))&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;regular-expressions&#34;&gt;&#xA;  Regular Expressions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#regular-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can specify a required number of matches, more specific than &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. The format is &lt;code&gt;(some matching pattern){min, max}&lt;/code&gt;.&#xA;You can omit min or max if you don&amp;rsquo;t want a lowerbound or upperbound, respectively.&#xA;To specify a particular number of matches, use &lt;code&gt;(pattern){exactNum}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;debugging&#34;&gt;&#xA;  Debugging&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#debugging&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;console.clear() is useful&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Execution</title>
      <link>https://work.rehanvipin.me/webdev/js-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/js-execution/</guid>
      <description>&lt;h1 id=&#34;how-does-js-run-in-the-browser--node&#34;&gt;&#xA;  How does JS run in the browser &amp;amp; node?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-does-js-run-in-the-browser--node&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;If you prefer visuals over text, these talks are really good (videos aren&amp;rsquo;t mine):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;WTH is the Event Loop?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=u1kqx6AenYw&#34;&gt;Further Adventures of the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=cCOL7MC4Pl0&#34;&gt;Jake Archibald on the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The v8 runtime provides a &lt;strong&gt;call stack&lt;/strong&gt; and heap.&#xA;Then in the browser, we have the WebAPIs, which provides FUNctions which can make code execute elsewhere.&#xA;We have :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web App Architecture</title>
      <link>https://work.rehanvipin.me/webdev/web-app-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/web-app-arch/</guid>
      <description>&lt;h1 id=&#34;overall-design-between-browser--server&#34;&gt;&#xA;  Overall design between browser &amp;amp; server&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overall-design-between-browser--server&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How do you serve content to a user in 2024?&#xA;Well, the ways I know of are &amp;hellip;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Django, or Flask (what architectres do these promote? MVC?)&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot &amp;amp; React (Single Page Apps. MVVM apparently??)&lt;/li&gt;&#xA;&lt;li&gt;Next.js (and other SSR)&lt;/li&gt;&#xA;&lt;li&gt;Hugo (Static Site Gen)&lt;/li&gt;&#xA;&lt;li&gt;Rails (MVC)&lt;/li&gt;&#xA;&lt;li&gt;Cloudflare web workers (the &amp;ldquo;serverless&amp;rdquo; design)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;architectures&#34;&gt;&#xA;  Architectures&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architectures&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mvc&#34;&gt;&#xA;  MVC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Model View Controller.&#xA;Lots of strong opinions about this.&#xA;Apparently, there are no MVC frameworks, but just apps which implement the MVC architecture pattern.&#xA;That might be an over-simplification. There could be frameworks which make it easy to do MVC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Authentication</title>
      <link>https://work.rehanvipin.me/webdev/web-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/web-auth/</guid>
      <description>&lt;h1 id=&#34;authentication-in-web-services&#34;&gt;&#xA;  Authentication in web services&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#authentication-in-web-services&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How does an application figure out who is talking to it? What part of the identity of that person / system is enough?&lt;/p&gt;&#xA;&lt;p&gt;e-mails &amp;amp; passwords are one way. WebAuthn is another.&#xA;kerberos is a good option inside an enterprise. it provides a convenient SSO experience when combined with SPNEGO.&#xA;session tokens passed on as cookies can also work depending on the use case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>React &amp; Boostrap</title>
      <link>https://work.rehanvipin.me/webdev/react-and-bootstrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/react-and-bootstrap/</guid>
      <description>&lt;h1 id=&#34;react&#34;&gt;&#xA;  React&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#react&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A library to build user interfaces&lt;/p&gt;&#xA;&lt;p&gt;It uses JSX, an extension of HTML that allows embeddable JS.&#xA;JSX is transpiled by babel and put into React&amp;rsquo;s representation of the DOM.&#xA;Like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wow&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;, document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#hah&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;components&#34;&gt;&#xA;  Components&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#components&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;One way to create them is by returning JSX from functions (the function name should start with a capital letter)&lt;/li&gt;&#xA;&lt;li&gt;Multiple components can be used to make a web page&lt;/li&gt;&#xA;&lt;li&gt;The other way is creating a class that extends &lt;code&gt;React.Component&lt;/code&gt;. This gives access to state and lifecycle hooks.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;render&lt;/code&gt; method of that class can be used to return the JSX&lt;/li&gt;&#xA;&lt;li&gt;To include one component in another, just add a self closing tag with that component&amp;rsquo;s name in the JSX of this one.&lt;/li&gt;&#xA;&lt;li&gt;To render components, do: &lt;code&gt;ReactDOM.render(&amp;lt;CompName/&amp;gt;, document.querySelector(&#39;#bingo&#39;));&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;To pass properties to them, do: &lt;code&gt;&amp;lt;LolComp prop1=&#39;hah&#39; prop2={[&#39;abc&#39;, &#39;def&#39;]} prop3={new Date()} /&amp;gt;&lt;/code&gt;&#xA;which can then be accessed from the single parameter as &lt;code&gt;param.prop1&lt;/code&gt;, &lt;code&gt;param.prop2&lt;/code&gt;, and so on.&lt;/li&gt;&#xA;&lt;li&gt;The default properties object can be set like so: &lt;code&gt;CompName.defaultProps = {}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;For a class component, the properties can be accessed like so:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hah&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funObj&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funObj&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// one of the things it does is set this.props = funObj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;() {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;propName&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/div&amp;gt;;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;To add state to a component, just declare a &lt;code&gt;state&lt;/code&gt; property in its constructor&lt;/li&gt;&#xA;&lt;li&gt;To set state later, call &lt;code&gt;this.setState(/* the new state object */)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;setState&lt;/code&gt; performs operation asynchronously, so you cannot know for sure&#xA;what the value of the state will be at any point. To make sure you get the correct value,&#xA;you can also pass functions to setState like so:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;prop1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prop1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;updaterStuff&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;prop2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newValueStuff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Note that the object that&amp;rsquo;s passed to &lt;code&gt;setState&lt;/code&gt; doesn&amp;rsquo;t have to represent the whole state.&#xA;It should be a subset of only keys whose values have been updated.&lt;/li&gt;&#xA;&lt;li&gt;There are lifecycle hooks like &lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;In React, a uni-directional flow of data from parents to child is preferred.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;redux&#34;&gt;&#xA;  Redux&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redux&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;State management for web apps. There&amp;rsquo;s a single state store object for all pages of the app.&#xA;Updates to the state are done with &amp;ldquo;actions&amp;rdquo; which are just objects with a &amp;ldquo;type&amp;rdquo; property and other data.&#xA;Redux state is read-only, if you want to change some property, create a new state object (which is what the reducer does).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
