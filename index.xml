<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Field Manual</title>
    <link>https://work.rehanvipin.me/</link>
    <description>Recent content in Introduction on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/misc/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/d3/</guid>
      <description>&lt;h1 id=&#34;data-driven-docs&#34;&gt;&#xA;  Data Driven Docs?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-driven-docs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a powerful library with a bit of a learning curve.&lt;/p&gt;&#xA;&lt;p&gt;There a heck lot of things it can do. Nice confusion.&#xA;These might be some good resources:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.d3indepth.com/&#34;&gt;An updated D3 tutorial&lt;/a&gt; (This was the best!)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://observablehq.com/@d3/learn-d3&#34;&gt;Official tutorial&lt;/a&gt;&#xA;(It can take some time to get used to observableHQ&amp;rsquo;s notebooks)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34;&gt;Huge collection of tutorials&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://wattenberger.com/blog/d3#intro&#34;&gt;https://wattenberger.com/blog/d3#intro&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[SUGGESTION]: Do the d3indepth tutorial first and practise a bit by trying to make your own visualizations.&#xA;The other resources can be useful when you&amp;rsquo;re stuck.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTML</title>
      <link>https://work.rehanvipin.me/webdev/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/html/</guid>
      <description>&lt;h1 id=&#34;html&#34;&gt;&#xA;  HTML&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Notes made while studying this&#xA;&#xA;  &lt;a href=&#34;https://www.freecodecamp.org/learn/responsive-web-design/&#34;&gt;freeCodeCamp certification for responsive web design&lt;/a&gt; and more.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-html-and-html5&#34;&gt;&#xA;  Basic HTML and HTML5&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-html-and-html5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a convention to write all HTML tags in lowercase.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Fancy new HTML5 tags : &lt;code&gt;main&lt;/code&gt; inside which you can put other elements. These are supposed to be the &amp;ldquo;main&amp;rdquo; elements from an SEO standpoint.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All &lt;code&gt;img&lt;/code&gt; tags must have the alt attribute. The &lt;code&gt;img&lt;/code&gt; tag is a type of self-closing tag.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/overview/</guid>
      <description>&lt;h1 id=&#34;an-overview-and-miscellaneous-stuff&#34;&gt;&#xA;  An overview (and miscellaneous stuff)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#an-overview-and-miscellaneous-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Angular is a platform, &#xA;  &lt;a href=&#34;https://angular.io/guide/what-is-angular&#34;&gt;apparently&lt;/a&gt;, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-bootstrap-process&#34;&gt;&#xA;  The bootstrap process&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-bootstrap-process&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first file that is run is &lt;code&gt;main.ts&lt;/code&gt; (as defined in &lt;code&gt;angular.json&lt;/code&gt;  &lt;strong&gt;That&amp;rsquo;s a very useful file&lt;/strong&gt;).&lt;/li&gt;&#xA;&lt;li&gt;It bootstraps a module, &lt;code&gt;app/module.ts&lt;/code&gt; by default.&lt;/li&gt;&#xA;&lt;li&gt;It bootstraps the root component, &lt;code&gt;app/app.component.ts&lt;/code&gt; by default.&lt;/li&gt;&#xA;&lt;li&gt;The root component is placed in &lt;code&gt;app/index.html&lt;/code&gt; which is what is rendered.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;modules-and-libraries&#34;&gt;&#xA;  Modules and libraries&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modules-and-libraries&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only the root NgModule should have a bootstrap property in its decorator.&#xA;The bootstrap property sets the root component for the app.&lt;/li&gt;&#xA;&lt;li&gt;Libraries are plain JS modules which can have angular modules.&lt;/li&gt;&#xA;&lt;li&gt;A component / directive / pipe can be declared in only one &lt;code&gt;NgModule&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;To use stuff that other module provide, you import that &lt;strong&gt;&lt;code&gt;NgModule&lt;/code&gt;&lt;/strong&gt; in this &lt;code&gt;NgModule&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;When you list services in the providers array, they are available app wide.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s possible to have multiple entry point components in the &lt;code&gt;bootstrap&lt;/code&gt; array.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;file-structure-of-workspace&#34;&gt;&#xA;  File structure of workspace&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#file-structure-of-workspace&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;deployment-&#34;&gt;&#xA;  Deployment ðŸŽˆ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#deployment-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is done with the &lt;code&gt;ng build&lt;/code&gt; command which:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup</title>
      <link>https://work.rehanvipin.me/java/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/intro/</guid>
      <description>&lt;h1 id=&#34;introduction--dev-setup&#34;&gt;&#xA;  Introduction &amp;amp; Dev Setup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction--dev-setup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-the-java-platform&#34;&gt;&#xA;  What is the Java platform?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-the-java-platform&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Java compiler, which defines what the Java language is and converts it to bytecode.&#xA;Also a bunch of other tools which can help in development e.g., tools to inspect / decompile files.&lt;/li&gt;&#xA;&lt;li&gt;The Java Virtual Machine which executes the bytecode on the computer.&#xA;This along with the classes required to run the program (i.e., standard libraries) is called the Java Runtime Environment.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These two together make up the Java Development Kit, which is required to write and execute Java programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Framework</title>
      <link>https://work.rehanvipin.me/spring-boot/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/spring-boot/framework/</guid>
      <description>&lt;h1 id=&#34;spring-framework&#34;&gt;&#xA;  Spring Framework&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-framework&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-why-would-you-use-it&#34;&gt;&#xA;  What? Why would you use it?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-why-would-you-use-it&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It is a dependency injection framework that helps you simplify your code and make it more testable.&#xA;It started as an alternative to Java 2 EE and has now grown beyond it.&#xA;It even includes a web framework (Web MVC) within it.&#xA;Baked in with best practices so you can focus on the business problem.&lt;/p&gt;&#xA;&lt;p&gt;It encourages you to use interfaces and helps minimize configuration code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/components/</guid>
      <description>&lt;h1 id=&#34;the-real-content&#34;&gt;&#xA;  The real CONTENT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-real-content&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Fun fact: The &lt;code&gt;@Component&lt;/code&gt; decorator actually extends &lt;code&gt;@Directive&lt;/code&gt; decorator because components are &lt;em&gt;technically&lt;/em&gt; directives.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A bare component is a class, defined in a .ts file. You can create new one like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a &lt;code&gt;.ts&lt;/code&gt; file and export a class that is decorated by &lt;code&gt;Component&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;. The decorator takes in an object as argument.&#xA;The object has properties like &lt;code&gt;selector&lt;/code&gt; (which is a CSS selector to find out which HTML elements this component should apply to) and &lt;code&gt;template&lt;/code&gt; (or &lt;code&gt;templateUrl&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Import this class in &lt;code&gt;app.module.ts&lt;/code&gt; and add it to declarations in the &lt;code&gt;NgModule&lt;/code&gt; decorator of AppModule.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Data binding: Accessing the component&amp;rsquo;s properties within its template via the &lt;code&gt;{{ any JS expression }}&lt;/code&gt; syntax.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS</title>
      <link>https://work.rehanvipin.me/webdev/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/css/</guid>
      <description>&lt;h1 id=&#34;cascading-style-sheets&#34;&gt;&#xA;  Cascading Style Sheets&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cascading-style-sheets&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;notes-from-course&#34;&gt;&#xA;  Notes from course&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#notes-from-course&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Web fonts can be downloaded onto the user&amp;rsquo;s browser if your website requires them. This is done by defining the font in CSS, e.g. in the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. The rule is specified as :&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#66d9ef&#34;&gt;font-face&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open Sans&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/fonts/OpenSans-Regular-webfont.woff2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;woff2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/fonts/OpenSans-Regular-webfont.woff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;woff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This whole thing can be importing it as a style sheet using the &lt;code&gt;link&lt;/code&gt; tag within the &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Along with fonts like that there are also &amp;ldquo;Generic fonts&amp;rdquo; which are present in all browsers. When specifying generic font names you don&amp;rsquo;t need quotes since they are CSS keywords. E.g. Helvetica.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mods &amp; Packs</title>
      <link>https://work.rehanvipin.me/java/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/modules/</guid>
      <description>&lt;h1 id=&#34;modules--packages&#34;&gt;&#xA;  Modules &amp;amp; Packages&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modules--packages&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How is java code bundled up to be shared?&#xA;Previously it was through packages and classpath.&#xA;After &#xA;  &lt;a href=&#34;https://www.baeldung.com/project-jigsaw-java-modularity&#34;&gt;project jigsaw&lt;/a&gt;, it is through modules.&lt;/p&gt;&#xA;&lt;p&gt;What are they? How are they different?&lt;/p&gt;&#xA;&lt;p&gt;Good resources for the same:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/packages/&#34;&gt;https://dev.java/learn/packages/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/modules/&#34;&gt;https://dev.java/learn/modules/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/jlink/&#34;&gt;https://dev.java/learn/jlink/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://work.rehanvipin.me/misc/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/typescript/</guid>
      <description>&lt;h1 id=&#34;write-javascript-with-confidence&#34;&gt;&#xA;  Write JavaScript with confidence&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#write-javascript-with-confidence&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The docs are good. Check them out: &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/docs/&#34;&gt;https://www.typescriptlang.org/docs/&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same. You can try it out &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/play&#34;&gt;online&lt;/a&gt;. Its main features are:&lt;/p&gt;&#xA;&lt;h3 id=&#34;static-typing&#34;&gt;&#xA;  Static typing&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#static-typing&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;You can declare types while declaring variables, like so: &lt;code&gt;let var: number;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JS</title>
      <link>https://work.rehanvipin.me/webdev/js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/js/</guid>
      <description>&lt;h1 id=&#34;javascript&#34;&gt;&#xA;  JavaScript&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#javascript&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Notes from the freeCodeCamp &amp;ldquo;JavaScript Algorithms and Data Structures&amp;rdquo; course and more&lt;/p&gt;&#xA;&lt;h2 id=&#34;basics&#34;&gt;&#xA;  Basics&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basics&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variable names in JS can contain $, _, letters, and numbers but cannot start with a number.&#xA;Declaring a variable without initalizing it will make it an &lt;code&gt;undefined&lt;/code&gt; type object and it will have the value &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;People like writing JS variable names in camelCase.&lt;/li&gt;&#xA;&lt;li&gt;Variables declared with &lt;code&gt;var&lt;/code&gt; can be declared multiple times.&#xA;Trying to re-declare a variable declared with &lt;code&gt;let&lt;/code&gt; results in a SyntaxError. &lt;code&gt;const&lt;/code&gt; is like &lt;code&gt;let&lt;/code&gt; but the variable is read-only.&lt;/li&gt;&#xA;&lt;li&gt;JS has the &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; increment and decrement operators.&#xA;The &lt;code&gt;%&lt;/code&gt; in JS is not a modulo operator, it&amp;rsquo;s a remainder operator and can return negative remainders.&lt;/li&gt;&#xA;&lt;li&gt;Values of type &lt;code&gt;String&lt;/code&gt; are immutable. Like Python.&lt;/li&gt;&#xA;&lt;li&gt;Constant variables cannot have their value changed, they cannot be re-declared or re-assigned a different value.&#xA;In this case : &lt;code&gt;const a = [1, 2, 3]&lt;/code&gt;, the variable &lt;code&gt;a&lt;/code&gt; holds the reference to the array (since it is not a primitive type).&#xA;Therefore the array itself can be modified (e.g. &lt;code&gt;a.push(1)&lt;/code&gt; or &lt;code&gt;a[2] = 7&lt;/code&gt;) since the reference won&amp;rsquo;t change and the &amp;ldquo;const-ness&amp;rdquo; still holds.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;push&lt;/code&gt; function of an &lt;code&gt;array&lt;/code&gt; takes in one or more arguments and appends them to the end of the array.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;shift&lt;/code&gt; and &lt;code&gt;unshift&lt;/code&gt; remove and add values to the beginning to the start of the array&#xA;just like &lt;code&gt;pop&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt; do to the end of the array.&lt;/li&gt;&#xA;&lt;li&gt;If a variable is declared without &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; it will have global scope regardless of where it is declared.&#xA;&lt;strong&gt;Explanation&lt;/strong&gt;: &#xA;  &lt;a href=&#34;http://blog.niftysnippets.org/2008/03/horror-of-implicit-globals.html&#34;&gt;There aren&amp;rsquo;t any &amp;ldquo;global variables&amp;rdquo; in JS&lt;/a&gt;&#xA;(They are there when declared by &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;).&#xA;When you do &lt;code&gt;wowNiceGlobal = 5&lt;/code&gt; where &lt;code&gt;wowNiceGlobal&lt;/code&gt; is being referenced for the first time thus making it a &amp;ldquo;global variable&amp;rdquo;&#xA;and giving it global scope, it really just creates and assigns to a property (with the same name) of &lt;strong&gt;the&lt;/strong&gt; global object.&#xA;In a browser, the &lt;code&gt;window&lt;/code&gt; variable is a reference to the global object.&#xA;You can stop this property setting from happening by adding &amp;ldquo;use strict&amp;rdquo; to your code.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scope&lt;/strong&gt;. A variable, declared with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; at the top level of your code is given global scope. &lt;code&gt;var&lt;/code&gt; has a function scope. If a &lt;code&gt;var&lt;/code&gt; variable is defined in some block in a function it will be available throughout the function. &lt;code&gt;let&lt;/code&gt; is block scoped. It does not exist outside the block. Within their scopes both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; variables are &amp;ldquo;hoisted&amp;rdquo;. This means they are defined at the top of their scopes. &lt;code&gt;var&lt;/code&gt; variables are initialized with &lt;code&gt;undefined&lt;/code&gt; while &lt;code&gt;let&lt;/code&gt; variables are not initialized and will cause a ReferenceError if you try to access them. &lt;code&gt;const&lt;/code&gt; has the same scoping rules as &lt;code&gt;let&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;==&lt;/code&gt; operator will perform type coercion if the operands aren&amp;rsquo;t of the same type. The &lt;code&gt;===&lt;/code&gt; operator doesn&amp;rsquo;t convert types and will return false if the types are different. Like that there are also the &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; operators.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Type Coercion&lt;/strong&gt;. Primitive types are &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;symbol&lt;/code&gt;(new, added in ES6). Using &#xA;  &lt;a href=&#34;https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/&#34;&gt;this article about type coercion for reference&lt;/a&gt; we see that you can explicitly convert and that the only implicit conversion allowed (for primitives and others) is &amp;ldquo;to string&amp;rdquo;, &amp;ldquo;to number&amp;rdquo;, and &amp;ldquo;to boolean&amp;rdquo;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Boolean conversion happens with logical operators (but the result of the expression is still the original type). Objects are always truthy values.&lt;/li&gt;&#xA;&lt;li&gt;String conversion happens with the &lt;code&gt;+&lt;/code&gt; operator when either operands are of the string type.&lt;/li&gt;&#xA;&lt;li&gt;Number and object conversions are complex. Must check the blog post.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;In a switch statement, once a case has been matched, all statements from there on are executed till a break is encountered (regardless of curly braces). Cases are matched with &lt;code&gt;===&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Objects&lt;/strong&gt;. They are a collection of key: value elements. The keys are called properties. All properties are converted to a string and stored. You can access values of properties of objects via &lt;code&gt;.&lt;/code&gt; (in case the property string is also a valid identifier) or &lt;code&gt;[]&lt;/code&gt; (works for all properties).&lt;/li&gt;&#xA;&lt;li&gt;You can &lt;strong&gt;delete properties&lt;/strong&gt; from objects. Just add the keyword &lt;code&gt;delete&lt;/code&gt; before accessing the property either via the dot notation or bracket notation.&lt;/li&gt;&#xA;&lt;li&gt;To check if an object has a property, use this function: &lt;code&gt;objkt.hasOwnProperty(propname)&lt;/code&gt; which returns a boolean value.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;while&lt;/code&gt; loop and the &lt;code&gt;for&lt;/code&gt; loops are like C&amp;rsquo;s. The &lt;code&gt;do{}while()&lt;/code&gt; loop too.&lt;/li&gt;&#xA;&lt;li&gt;The RNG for JS is &lt;code&gt;Math.random&lt;/code&gt; which returns numbers in the range [0, 1).&lt;/li&gt;&#xA;&lt;li&gt;When you have a variable of the Function type you can check how many args it takes&#xA;using &lt;code&gt;varName.length&lt;/code&gt; and find out the function name using &lt;code&gt;varName.name&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;es6-modern-javascript&#34;&gt;&#xA;  ES6 (Modern JavaScript)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#es6-modern-javascript&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can prevent an object from being modified by passing it to &lt;code&gt;Object.freeze(objkt)&lt;/code&gt; (Not by making a &lt;code&gt;const&lt;/code&gt; object).&lt;/li&gt;&#xA;&lt;li&gt;You can extend an array (a1) with another array (a2) by using &lt;code&gt;arr1.concat(arr2)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Variable argument functions are possible using the rest parameter.&#xA;You specify a parameter as &lt;code&gt;...paraName&lt;/code&gt; and when you pass multiple arguments they are all available in array with that name (paraName here).&#xA;This is the preffered method over using the &lt;code&gt;arguments&lt;/code&gt; object that&amp;rsquo;s available for all non-arrow functions.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, there is the &amp;ldquo;spread&amp;rdquo; operator to unpack an array into multiple elements, this can be useful when the function expects multiple parameters instead of an array. It follows the same syntax. Given an array arr, you can do &lt;code&gt;console.log(...arr)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The object destructuring operator is a clean shortcut to extract multiple values from an object at once. The most basic way to do it is : &lt;code&gt;{param1, param2} = objkt&lt;/code&gt;. Suppose you want to use variables of different names you can do this : &lt;code&gt;{&amp;quot;param1&amp;quot;: var1, &amp;quot;param2&amp;quot;: var2} = objkt&lt;/code&gt;. Nested objects call for nested destructuring. You can destructure in the function arguments.&lt;/li&gt;&#xA;&lt;li&gt;Similarly, there is also array destructuring. You can unpack particular values from the array. Like so, &lt;code&gt;[a, b,,,, c, d,, e] = [1,2,3,4,5,6,7,8,9,0]&lt;/code&gt;. For the last elements, you can also unpack them into a separate array using the rest operator. So if you want a new array but without the first 4 values you would do : &lt;code&gt;[,,,, ...new_arr] = arr&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Format strings are available as template literals. They are used as ` any text `. In a template literal you use &lt;code&gt;${ any expression }&lt;/code&gt; to place run-time values. They preserve all whitespace.&lt;/li&gt;&#xA;&lt;li&gt;There is also a shorthand for creating objects. You can just do &lt;code&gt;{x, y}&lt;/code&gt;. The keys will be &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; (in string format) respectively.&lt;/li&gt;&#xA;&lt;li&gt;When defining functions in objects you can omit the &lt;code&gt;function&lt;/code&gt; keyword and just do &lt;code&gt;prop_name(arg1, arg2){}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can use the &lt;code&gt;class&lt;/code&gt; keyword to have a &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods, and you can create an object of that type with &lt;code&gt;new className(constructor args)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You can make the variables, functions, and whatnot of one JS file available to others by &amp;ldquo;exporting&amp;rdquo; it. You do this by either adding the &lt;code&gt;export&lt;/code&gt; keyword to it during delcaration or later on, where you can export multiple vars like &lt;code&gt;export {var1, func1, var2}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;To make use of them in another file you can &amp;ldquo;import&amp;rdquo; them like this : &lt;code&gt;import {var2, func1} from &amp;quot;relative_path_to_other_js_file&amp;quot;&lt;/code&gt;. Or you can import everything from that file and place it under an object like this : &lt;code&gt;import * as containah from &amp;quot;that_other_file&amp;quot;&lt;/code&gt;. Then access them like &lt;code&gt;containah.var1&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;There are also &amp;ldquo;default exports&amp;rdquo;. This means that you can have one export which is the default thing that will be imported from a file when you do this : &lt;code&gt;import something from &amp;quot;file&amp;quot;&lt;/code&gt;. To set something as a default export you can do &lt;code&gt;export default var&lt;/code&gt;. They are useful when a file represents one item and you want to import that in some other file. It isn&amp;rsquo;t particulary useful when a file is meant to do multiple things and has multiple items.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;new operator&lt;/strong&gt; can be used to create objects from &lt;strong&gt;functions&lt;/strong&gt; or &lt;strong&gt;classes&lt;/strong&gt;. To use it with a function the function must act like a constructor and set properties to &lt;code&gt;this&lt;/code&gt;. To use it with a class, the class must have a constructor.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Promise&lt;/strong&gt; is a feature to execute code asynchronously. You can create a &lt;code&gt;Promise&lt;/code&gt; object with the &lt;code&gt;Promise&lt;/code&gt; function. It expects you to take in two arguments (both of which are callbacks). As a convention we create a new promise object like this : &lt;code&gt;let prms = new Promise((resolve, reject) =&amp;gt; {});&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;A promise can be in one of three states: &lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;fulfilled&lt;/code&gt;, and &lt;code&gt;failed&lt;/code&gt;. It is &lt;code&gt;pending&lt;/code&gt; when the promise is created, &lt;code&gt;fulfilled&lt;/code&gt; when the &lt;code&gt;resolve&lt;/code&gt; function is called, and &lt;code&gt;failed&lt;/code&gt; when the &lt;code&gt;reject&lt;/code&gt; function is called. Both &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; take one argument each.&lt;/li&gt;&#xA;&lt;li&gt;You can set hanlders for a promise by calling &lt;code&gt;.then(resolveFunc, rejectFunc)&lt;/code&gt; or &lt;code&gt;.catch(rejectFunc)&lt;/code&gt;.&#xA;You can pass a function &lt;code&gt;resolveFunc&lt;/code&gt; (executed when the promise enters the &amp;ldquo;fulfilled&amp;rdquo; state)&#xA;which takes one argument, i.e. the value passed to &lt;code&gt;resolve&lt;/code&gt;.&#xA;You could also pass the &lt;code&gt;rejectFunc&lt;/code&gt; (executed when the promise enters the &amp;ldquo;failed&amp;rdquo; state)&#xA;that takes in one argument i.e., the value passed to &lt;code&gt;reject&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;To collect multiple promises into one there&amp;rsquo;s the &lt;code&gt;Promise.All&lt;/code&gt; function which takes in an iterable and returns a promise which&#xA;resolves with an iterable of all resolved values of input promises or rejects when any of the input promises reject.&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s possible to have multiple handlers for a promise. e.g., &lt;code&gt;prms.then(() =&amp;gt; {alert(1);}); prms.then(() =&amp;gt; {alert(2);});&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;It&amp;rsquo;s also possible to chain handlers because &lt;code&gt;.then()&lt;/code&gt; returns an object which the &lt;code&gt;.catch&lt;/code&gt; and &lt;code&gt;.then&lt;/code&gt; functions.&#xA;Therefore you could do&#xA;&lt;code&gt;prms.then(rsVal =&amp;gt; new Promise((rs, rj) =&amp;gt; rs(1)).then(rsVal =&amp;gt; new Promise((rs, rj) =&amp;gt; rs(3))).catch(rjVal =&amp;gt; console.log(rjVal))&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;regular-expressions&#34;&gt;&#xA;  Regular Expressions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#regular-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can specify a required number of matches, more specific than &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. The format is &lt;code&gt;(some matching pattern){min, max}&lt;/code&gt;.&#xA;You can omit min or max if you don&amp;rsquo;t want a lowerbound or upperbound, respectively.&#xA;To specify a particular number of matches, use &lt;code&gt;(pattern){exactNum}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;debugging&#34;&gt;&#xA;  Debugging&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#debugging&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;console.clear() is useful&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVM</title>
      <link>https://work.rehanvipin.me/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/jvm/</guid>
      <description>&lt;h1 id=&#34;the-java-virtual-machine&#34;&gt;&#xA;  The Java Virtual Machine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-java-virtual-machine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It executes the bytecode apparently.&lt;/p&gt;&#xA;&lt;p&gt;Learn more about it&amp;rsquo;s internals through these courses:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/understanding-java-vm-memory-management/table-of-contents&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/understanding-java-vm-class-loading-reflection/table-of-contents&#34;&gt;Class Loading&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/template/</guid>
      <description>&lt;h1 id=&#34;the-template-syntax&#34;&gt;&#xA;  The template syntax&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-template-syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.&lt;/p&gt;&#xA;&lt;p&gt;There are HTML attributes and there are DOM properties. Sometimes there&amp;rsquo;s a one-one mapping between them,&#xA;sometimes an attribute exists but has no corresponding property and vice-versa.&lt;/p&gt;&#xA;&lt;details &gt;&#xA;  &lt;summary&gt;Binding in HTML&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    &lt;h2 id=&#34;js-in-html&#34;&gt;&#xA;  JS in HTML?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#js-in-html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;There are multiple ways you can use JS objects in HTML. Two of them are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tips &amp; Tricks</title>
      <link>https://work.rehanvipin.me/misc/tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/tips-tricks/</guid>
      <description>&lt;h1 id=&#34;tips-tricks-and-resources&#34;&gt;&#xA;  Tips, tricks, and resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tips-tricks-and-resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Modern JS has many inbuilt features, not all of them are so well known.&#xA;&#xA;  &lt;a href=&#34;https://2022.stateofjs.com/en-US/features/language/&#34;&gt;Check them out, from the stateOfJS22&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Good resource &amp;amp; book on how to design modern web apps: &#xA;  &lt;a href=&#34;https://www.patterns.dev/&#34;&gt;https://www.patterns.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variable hoisting was an unintended addition that came along with function hoisting when JS was&#xA;being developed. Hoisting is done by the two-scan interpreter. The first scan is to find declarations.&#xA;This &#xA;  &lt;a href=&#34;https://stackoverflow.com/questions/15005098/why-does-javascript-hoist-variables&#34;&gt;stackoverflow q&amp;amp;a&lt;/a&gt; has some good answers.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s no concept of &amp;ldquo;initialization&amp;rdquo; in JS.&#xA;There is declaration (&lt;code&gt;let a&lt;/code&gt;) and there is assignment (&lt;code&gt;a = 2&lt;/code&gt;).&#xA;&amp;ldquo;Definition&amp;rdquo; is just syntax sugar to do both declaration and assignment at once.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;typeof null&lt;/code&gt; evaluates to &lt;code&gt;&#39;object&#39;&lt;/code&gt; in JS. &#xA;  &lt;a href=&#34;http://crockford.com/javascript/remedial.html&#34;&gt;Which is a bug apparently&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;While writing the CSS for a site, it&amp;rsquo;s a good idea to write it mobile first and then add&#xA;media queries for the larger screen sizes. It leads to less CSS. Even if the design was desktop based.&lt;/li&gt;&#xA;&lt;li&gt;JS has so many inbuilt things. &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;Proxy&lt;/a&gt; is one of them.&lt;/li&gt;&#xA;&lt;li&gt;Want to know if you&amp;rsquo;ve covered all best-practices and stuff for your web app?&#xA;There&amp;rsquo;s a nice &#xA;  &lt;a href=&#34;https://frontendchecklist.io&#34;&gt;checklist&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;A book about building &#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal&#34;&gt;web apps&lt;/a&gt; by Basecamp. It&amp;rsquo;s good apparently.&#xA;&#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal/getting-real.pdf&#34;&gt;PDF&lt;/a&gt; also available.&lt;/li&gt;&#xA;&lt;li&gt;Confused about what units to use in CSS? &#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=N5wpD9Ov_To&#34;&gt;Check out this video by Kevin Powell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use &lt;code&gt;rem&lt;/code&gt; (i.e., root el) for fonts and most other things. It&amp;rsquo;s relative to the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; (which is 16px by default)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the element it is on or the closest parent which has defined a font size. When it&amp;rsquo;s used for some other property, it only references this element&amp;rsquo;s font-size. It can be useful for padding and margins.&lt;/li&gt;&#xA;&lt;li&gt;Use percentages for &lt;code&gt;width&lt;/code&gt; (prefer to use &lt;code&gt;max-width&lt;/code&gt;) or &lt;code&gt;ch&lt;/code&gt; (equal to width of a char) when operating on a text container&lt;/li&gt;&#xA;&lt;li&gt;Think twice before setting &lt;code&gt;height&lt;/code&gt;. Try to set &lt;code&gt;min-height&lt;/code&gt; if it is really needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Try to keep text confined to 60 chars a row.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s an &lt;strong&gt;open source&lt;/strong&gt; design tool: &#xA;  &lt;a href=&#34;https://penpot.app&#34;&gt;Penpot&lt;/a&gt; which focuses on web standards&lt;/li&gt;&#xA;&lt;li&gt;The word &amp;ldquo;JavaScript&amp;rdquo; is trademarked by Oracle (&#xA;  &lt;a href=&#34;https://tinyclouds.org/trademark&#34;&gt;https://tinyclouds.org/trademark&lt;/a&gt;) as of Sept. 2022&lt;/li&gt;&#xA;&lt;li&gt;An easy way to locally deploy the built application is to run: &lt;code&gt;python -m http.server --bind localhost 8080&lt;/code&gt; which serves the current directory at &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a slight imperfection in the microsoft logo on black backgrounds&#xA;where the red box seems to appear larger than the blue box below it. This is due to the way pixels&#xA;are arranged in a display. &#xA;  &lt;a href=&#34;https://www.avforums.com/threads/anyone-else-have-an-offset-blue-and-red-square-on-the-microsoft-logo-of-office-2019.2310709/&#34;&gt;See it in more detail here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Want to see what are the new features in es6 and how many of them could be done in previous versions? This &#xA;  &lt;a href=&#34;http://es6-features.org/#Constants&#34;&gt;website&lt;/a&gt; lets you do that.&lt;/li&gt;&#xA;&lt;li&gt;Reference for JavaScript and some practice exercises : &#xA;  &lt;a href=&#34;https://wesbos.com/javascript&#34;&gt;https://wesbos.com/javascript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Browsers now have better client side functioning capabilities. Such as &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&#34;&gt;a proper DB&lt;/a&gt;, &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system&#34;&gt;virtualfile system&lt;/a&gt;, and even &#xA;  &lt;a href=&#34;https://webcontainers.io/&#34;&gt;running full programs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Build tools</title>
      <link>https://work.rehanvipin.me/java/build_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/build_tools/</guid>
      <description>&lt;h1 id=&#34;building-java-code&#34;&gt;&#xA;  Building Java code&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#building-java-code&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Why not just use &lt;code&gt;javac&lt;/code&gt; ? Well, you can but tools save time because there could be:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Many Java files that need to be compiled for the main file.&lt;/li&gt;&#xA;&lt;li&gt;Incremental builds, building only the classes whose code has changed.&lt;/li&gt;&#xA;&lt;li&gt;External dependencies that need to be fetched. (Transitive dependencies! Versions!)&lt;/li&gt;&#xA;&lt;li&gt;Package code into a &lt;code&gt;.jar&lt;/code&gt; or &lt;code&gt;.jmod&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;Custom arguments for compiling certain classes ?&lt;/li&gt;&#xA;&lt;li&gt;Custom arguments for running the tests.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is what tools like &lt;code&gt;maven&lt;/code&gt; and &lt;code&gt;gradle&lt;/code&gt; try to solve.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Execution</title>
      <link>https://work.rehanvipin.me/webdev/js-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/js-execution/</guid>
      <description>&lt;h1 id=&#34;how-does-js-run-in-the-browser--node&#34;&gt;&#xA;  How does JS run in the browser &amp;amp; node?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-does-js-run-in-the-browser--node&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;If you prefer visuals over text, these talks are really good (videos aren&amp;rsquo;t mine):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;WTH is the Event Loop?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=u1kqx6AenYw&#34;&gt;Further Adventures of the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=cCOL7MC4Pl0&#34;&gt;Jake Archibald on the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The v8 runtime provides a &lt;strong&gt;call stack&lt;/strong&gt; and heap.&#xA;Then in the browser, we have the WebAPIs, which provides FUNctions which can make code execute elsewhere.&#xA;We have :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/services/</guid>
      <description>&lt;h1 id=&#34;services-do-stuff&#34;&gt;&#xA;  Services (do STUFF)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#services-do-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: &#xA;  &lt;a href=&#34;https://angular.io/guide/architecture-services&#34;&gt;Services and DI&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;According to that page linked above:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You usually create one in a &lt;code&gt;.service.ts&lt;/code&gt; file. It is an exported class with functions which perform the required business actions. It can then be &lt;strong&gt;injected&lt;/strong&gt; into the required classes. It might depend on other services too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snowflake</title>
      <link>https://work.rehanvipin.me/misc/snowflake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/snowflake/</guid>
      <description>&lt;h1 id=&#34;snowflake-the-enterprise-data-warehouse&#34;&gt;&#xA;  Snowflake, the enterprise data warehouse&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#snowflake-the-enterprise-data-warehouse&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Not exactly. It&amp;rsquo;s a cloud data platform apparently.&lt;/p&gt;&#xA;&lt;p&gt;Why would you need it? Otherwise, an org can have so many DBs across departments,&#xA;with lots of data duplication and lesser opportunities for high level analysis across systems.&#xA;Also, it is cloud native and doesn&amp;rsquo;t expose any hardware aspects to the users. Less SRE work.&lt;/p&gt;&#xA;&lt;p&gt;Apparently, the on-prem structure of past solutions were not scalable and were expensive.&#xA;Snowflake uses AWS, Azure, or GCP, and is a much more scalable solution,&#xA;with separate scaling for storage and compute. It has a pay-as-you-go model. (Like AWS billing).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directives</title>
      <link>https://work.rehanvipin.me/angular/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/directives/</guid>
      <description>&lt;h1 id=&#34;directives-hmmm-&#34;&gt;&#xA;  Directives: Hmmm &amp;hellip;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#directives-hmmm-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are just classes that add extra behavior to elements ~ Angular docs.&lt;/p&gt;&#xA;&lt;p&gt;Components are represented in HTML as elements. Directives are represented as attributes on those elements. A directive can also be applied on a simple HTML element, not just components.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can create a directive class in a file like &lt;code&gt;nice.directive.ts&lt;/code&gt; like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;OnInit&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// CSS style selector e.g. [nice-stuff]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the HTML would be like &amp;lt;somecomp nice-stuff&amp;gt;&amp;lt;/somecomp&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NiceDirective&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They need to be added to the declaration section of the ngModule where they will be used. They can get a reference to the element they were used on via the &lt;code&gt;ElementRef&lt;/code&gt; service which can be added as a dependency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://work.rehanvipin.me/misc/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/git/</guid>
      <description>&lt;h1 id=&#34;git---version-control-system&#34;&gt;&#xA;  Git - Version Control System&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#git---version-control-system&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Understanding the fundamentals &amp;amp; inner model of git to be able to better work with it.&lt;/p&gt;&#xA;&lt;p&gt;This should be a good learning resource : &#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/how-git-works/table-of-contents&#34;&gt;How Git Works&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;storing-data&#34;&gt;&#xA;  Storing data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#storing-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;How does git store data?&#xA;The raw data, AKA blobs, are stored in the .git/objects directory along with some metadata in a compresssed format. They are addressed by SHA-1 hashes.&#xA;Blobs are one type of object. Others being commits, and trees.&#xA;It&amp;rsquo;s possible to store a new blob by doing &lt;code&gt;git hash-object path-to-the-file-containing-data -w&lt;/code&gt;.&#xA;You can find out the type of any object by doing &lt;code&gt;git cat-file the-hash-of-the-objkt -t&lt;/code&gt;, and print the file by doing &lt;code&gt;git cat-file the-hash-of-the-objkt -p&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web App Architecture</title>
      <link>https://work.rehanvipin.me/webdev/web-app-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/web-app-arch/</guid>
      <description>&lt;h1 id=&#34;overall-design-between-browser--server&#34;&gt;&#xA;  Overall design between browser &amp;amp; server&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overall-design-between-browser--server&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How do you serve content to a user in 2024?&#xA;Well, the ways I know of are &amp;hellip;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Django, or Flask (what architectres do these promote? MVC?)&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot &amp;amp; React (Single Page Apps. MVVM apparently??)&lt;/li&gt;&#xA;&lt;li&gt;Next.js (and other SSR)&lt;/li&gt;&#xA;&lt;li&gt;Hugo (Static Site Gen)&lt;/li&gt;&#xA;&lt;li&gt;Rails (MVC)&lt;/li&gt;&#xA;&lt;li&gt;Cloudflare web workers (the &amp;ldquo;serverless&amp;rdquo; design)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;architectures&#34;&gt;&#xA;  Architectures&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architectures&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mvc&#34;&gt;&#xA;  MVC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Model View Controller.&#xA;Lots of strong opinions about this.&#xA;Apparently, there are no MVC frameworks, but just apps which implement the MVC architecture pattern.&#xA;That might be an over-simplification. There could be frameworks which make it easy to do MVC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Server</title>
      <link>https://work.rehanvipin.me/java/web-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/web-server/</guid>
      <description>&lt;h1 id=&#34;sharing-stuff-to-browsers&#34;&gt;&#xA;  Sharing stuff to browsers&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sharing-stuff-to-browsers&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Sure, you can use Spring MVC and others, but what about using something more low-level.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Jetty Server&lt;/li&gt;&#xA;&lt;li&gt;Jetty Servlet (to handle requests)&lt;/li&gt;&#xA;&lt;li&gt;Apache CXF (to implement REST APIs, compliant with JAX-RS)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.baeldung.com/jetty-embedded&#34;&gt;https://www.baeldung.com/jetty-embedded&lt;/a&gt;&#xA;&#xA;  &lt;a href=&#34;https://www.baeldung.com/introduction-to-apache-cxf&#34;&gt;https://www.baeldung.com/introduction-to-apache-cxf&lt;/a&gt;&#xA;&#xA;  &lt;a href=&#34;https://www.baeldung.com/rest-api-jax-rs-vs-spring&#34;&gt;https://www.baeldung.com/rest-api-jax-rs-vs-spring&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/routing/</guid>
      <description>&lt;h1 id=&#34;routing--co&#34;&gt;&#xA;  Routing &amp;amp; Co.&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#routing--co&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Some modern apps, like the one built with Angular are &lt;strong&gt;Single Page Apps&lt;/strong&gt;. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-routes&#34;&gt;&#xA;  Creating routes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-routes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Routes are defined as an array of objects. The array is of the type &lt;code&gt;Routes&lt;/code&gt; from &amp;ldquo;@angular/router&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Authentication</title>
      <link>https://work.rehanvipin.me/webdev/web-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/web-auth/</guid>
      <description>&lt;h1 id=&#34;authentication-in-web-services&#34;&gt;&#xA;  Authentication in web services&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#authentication-in-web-services&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How does an application figure out who is talking to it? What part of the identity of that person / system is enough?&lt;/p&gt;&#xA;&lt;p&gt;e-mails &amp;amp; passwords are one way. WebAuthn is another.&#xA;kerberos is a good option inside an enterprise. it provides a convenient SSO experience when combined with SPNEGO.&#xA;session tokens passed on as cookies can also work depending on the use case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/forms/</guid>
      <description>&lt;h1 id=&#34;forms-and-validation&#34;&gt;&#xA;  Forms and validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forms-and-validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are two kinds of forms in Angular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Template based (the content and the logic is in the HTML)&lt;/li&gt;&#xA;&lt;li&gt;Model based A.K.A. Reactive (the content and logic is in the component)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;creating-a-form&#34;&gt;&#xA;  Creating a form&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-a-form&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You need the &lt;code&gt;FormModule&lt;/code&gt; from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms.&lt;/li&gt;&#xA;&lt;li&gt;When you import that module, it adds an NgForm directive to all form tags.&#xA;The directive instance can be accessed as described below.&lt;/li&gt;&#xA;&lt;li&gt;In the component with the form, on the form element, set a template reference variable like so: &lt;code&gt;&amp;lt;form #someNiceNameForForm=&amp;quot;ngForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;.&#xA;This provides additional functionality as &#xA;  &lt;a href=&#34;https://angular.io/guide/template-reference-variables#using-ngform-with-template-variables&#34;&gt;described in the docs&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For each input element whose value you want, set the &lt;code&gt;name&lt;/code&gt; attribute. This will be the key to access its value later on.&lt;/li&gt;&#xA;&lt;li&gt;For the submit action, prefer to bind to ngSubmit instead of using the submit button, like so: &lt;code&gt;&amp;lt;form #formTempVar=&amp;quot;ngForm&amp;quot; (ngSubmit)=&amp;quot;handlerFunc(formTempVar.value)&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;value&lt;/code&gt; prop. on the temp-ref-var is an object where the value for each input field with a name attr. is available.&lt;/li&gt;&#xA;&lt;li&gt;You can also bind &lt;code&gt;ngModel&lt;/code&gt; (which is a directive) on each input element to bind it to values&#xA;on the component, like so: &lt;code&gt;&amp;lt;input (ngModel)=&amp;quot;compoProp&amp;quot; id=&amp;quot;foo&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;.&#xA;To achieve &lt;strong&gt;two way data binding&lt;/strong&gt; you can do this: &lt;code&gt;[(ngModel)]=&amp;quot;compoProp&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;validation&#34;&gt;&#xA;  Validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Angular turns off the default behaviour of adding the &amp;ldquo;required&amp;rdquo; attribute on input elements. It does provide its own validation features:&lt;/p&gt;</description>
    </item>
    <item>
      <title>React &amp; Boostrap</title>
      <link>https://work.rehanvipin.me/webdev/react-and-bootstrap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/webdev/react-and-bootstrap/</guid>
      <description>&lt;h1 id=&#34;react&#34;&gt;&#xA;  React&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#react&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A library to build user interfaces&lt;/p&gt;&#xA;&lt;p&gt;It uses JSX, an extension of HTML that allows embeddable JS.&#xA;JSX is transpiled by babel and put into React&amp;rsquo;s representation of the DOM.&#xA;Like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wow&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;, document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#hah&amp;#39;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;components&#34;&gt;&#xA;  Components&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#components&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;One way to create them is by returning JSX from functions (the function name should start with a capital letter)&lt;/li&gt;&#xA;&lt;li&gt;Multiple components can be used to make a web page&lt;/li&gt;&#xA;&lt;li&gt;The other way is creating a class that extends &lt;code&gt;React.Component&lt;/code&gt;. This gives access to state and lifecycle hooks.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;render&lt;/code&gt; method of that class can be used to return the JSX&lt;/li&gt;&#xA;&lt;li&gt;To include one component in another, just add a self closing tag with that component&amp;rsquo;s name in the JSX of this one.&lt;/li&gt;&#xA;&lt;li&gt;To render components, do: &lt;code&gt;ReactDOM.render(&amp;lt;CompName/&amp;gt;, document.querySelector(&#39;#bingo&#39;));&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;To pass properties to them, do: &lt;code&gt;&amp;lt;LolComp prop1=&#39;hah&#39; prop2={[&#39;abc&#39;, &#39;def&#39;]} prop3={new Date()} /&amp;gt;&lt;/code&gt;&#xA;which can then be accessed from the single parameter as &lt;code&gt;param.prop1&lt;/code&gt;, &lt;code&gt;param.prop2&lt;/code&gt;, and so on.&lt;/li&gt;&#xA;&lt;li&gt;The default properties object can be set like so: &lt;code&gt;CompName.defaultProps = {}&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;For a class component, the properties can be accessed like so:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Hah&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;React&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Component&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funObj&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;funObj&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// one of the things it does is set this.props = funObj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;() {&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;propName&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/div&amp;gt;;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;To add state to a component, just declare a &lt;code&gt;state&lt;/code&gt; property in its constructor&lt;/li&gt;&#xA;&lt;li&gt;To set state later, call &lt;code&gt;this.setState(/* the new state object */)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;setState&lt;/code&gt; performs operation asynchronously, so you cannot know for sure&#xA;what the value of the state will be at any point. To make sure you get the correct value,&#xA;you can also pass functions to setState like so:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setState&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;prop1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prop1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;updaterStuff&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;prop2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newValueStuff&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;Note that the object that&amp;rsquo;s passed to &lt;code&gt;setState&lt;/code&gt; doesn&amp;rsquo;t have to represent the whole state.&#xA;It should be a subset of only keys whose values have been updated.&lt;/li&gt;&#xA;&lt;li&gt;There are lifecycle hooks like &lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;In React, a uni-directional flow of data from parents to child is preferred.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;redux&#34;&gt;&#xA;  Redux&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redux&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;State management for web apps. There&amp;rsquo;s a single state store object for all pages of the app.&#xA;Updates to the state are done with &amp;ldquo;actions&amp;rdquo; which are just objects with a &amp;ldquo;type&amp;rdquo; property and other data.&#xA;Redux state is read-only, if you want to change some property, create a new state object (which is what the reducer does).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/pipes/</guid>
      <description>&lt;h1 id=&#34;transforming-data&#34;&gt;&#xA;  Transforming data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transforming-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;built-in-pipes&#34;&gt;&#xA;  Built-in pipes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#built-in-pipes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can transform data before it is rendered in a template. There are many &#xA;  &lt;a href=&#34;https://angular.io/api/common#pipes&#34;&gt;inbuilt pipes&lt;/a&gt;. The format is &lt;code&gt;{{ yourContent | pipeName:pipeArg1 }}&lt;/code&gt; where the arguments are JS objects / literals and are optional. Example: &lt;code&gt;&amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;custom-pipe&#34;&gt;&#xA;  Custom pipe&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#custom-pipe&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;An example pipe:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the file goodie.pipe.ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Pipe&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goodiepipe&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the name used to call the pipe in the template&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GoodiePipe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this is the function that is called with the args&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is low&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is high&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must then add it to the &lt;code&gt;declarations&lt;/code&gt; of the NgModule where you want to use it. It can then be used like so: &lt;code&gt;{{ someVar | goodpipe:32 }}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/di/</guid>
      <description>&lt;h1 id=&#34;adding-features-&#34;&gt;&#xA;  Adding features! ðŸ™Œ&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#adding-features-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dependency-injection&#34;&gt;&#xA;  Dependency injection&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dependency-injection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is how you provide new components with extra resources they need to function. To indicate that a class (&lt;strong&gt;any class&lt;/strong&gt;, not just a component / service) has a dependency or is a dependency you decorate it with &lt;code&gt;@Injectable()&lt;/code&gt;. From the docs&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The injector is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don&amp;rsquo;t have to create injectors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/rxjs/</guid>
      <description>&lt;h1 id=&#34;async--network-stuff&#34;&gt;&#xA;  Async &amp;amp; network stuff&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#async--network-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent &lt;strong&gt;one event that happens in the future&lt;/strong&gt; while observables represent &lt;strong&gt;zero or more events that could happen synchronously or in the future&lt;/strong&gt;. This particular section is about RxJS and HTTP in Angular.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/test/</guid>
      <description>&lt;h1 id=&#34;unit--integrated-tests&#34;&gt;&#xA;  Unit &amp;amp; Integrated tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit--integrated-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;NOTE : Check the &#xA;  &lt;a href=&#34;https://angular.dev/guide/testing/utility-apis&#34;&gt;reference doc&lt;/a&gt; regarding&#xA;Testing APIs for Angular .&lt;/p&gt;&#xA;&lt;p&gt;Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:&lt;/p&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;isolated&#34;&gt;&#xA;  Isolated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#isolated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only tests the JS class not the component&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for services and pipes&lt;/li&gt;&#xA;&lt;li&gt;Need to create instances of classes on your own&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;integrated&#34;&gt;&#xA;  Integrated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#integrated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tests the class and template together&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for components and directives&lt;/li&gt;&#xA;&lt;li&gt;The objects are created by the framework&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;unit-tests&#34;&gt;&#xA;  Unit tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;They test a single unit (like a class, function, or a bunch of classes) in isolation. Some features of unit tests:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/libraries/</guid>
      <description>&lt;h1 id=&#34;ultra-level-reusability&#34;&gt;&#xA;  Ultra level reusability&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ultra-level-reusability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They provide extra functionality to Angular.&#xA;They don&amp;rsquo;t run on their own. They need to be used in an application.&#xA;There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Angular libraries (e.g. the @angular/x ones) are &lt;code&gt;NgModules&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some functionality of an app can be packaged into a library so it can be reused with other apps.&#xA;They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactivity with Signals</title>
      <link>https://work.rehanvipin.me/angular/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/signals/</guid>
      <description>&lt;h1 id=&#34;signals&#34;&gt;&#xA;  Signals&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#signals&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Apparently, it is used to make Angular apps more responsive and improve Change Detection.&lt;/p&gt;&#xA;&lt;p&gt;Signals can be thought of as a combination of state and a notification mechanism for changes to that state.&lt;/p&gt;&#xA;&lt;p&gt;How is that different from RxJS observables?&#xA;Observables are a notification mechanism for &lt;em&gt;events&lt;/em&gt; and don&amp;rsquo;t really hold state.&lt;br&gt;&#xA;What about Subjects then?? Well, they are similar, but state management code is simpler with signals (based on trials).&lt;br&gt;&#xA;One such benefit is that there is no need to manually &amp;ldquo;complete&amp;rdquo; &amp;amp; &amp;ldquo;unsubscribe&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/tmp</title>
      <link>https://work.rehanvipin.me/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/tmp/</guid>
      <description>&lt;h1 id=&#34;temporary-code-access&#34;&gt;&#xA;  Temporary code access&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#temporary-code-access&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Random stuff that doesn&amp;rsquo;t fit anywhere else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/next</title>
      <link>https://work.rehanvipin.me/whatnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/whatnext/</guid>
      <description>&lt;h1 id=&#34;so-much-to-learn&#34;&gt;&#xA;  So much to learn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#so-much-to-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These sound useful:&lt;/p&gt;&#xA;&lt;h2 id=&#34;webdev-stuff&#34;&gt;&#xA;  WebDev stuff&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webdev-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Search for &amp;ldquo;TODO&amp;rdquo; in notes and do those parts&lt;/li&gt;&#xA;&lt;li&gt;What really is ngModule - &#xA;  &lt;a href=&#34;https://blog.angular-university.io/angular2-ngmodule/&#34;&gt;https://blog.angular-university.io/angular2-ngmodule/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;How do service workers work? &#xA;  &lt;a href=&#34;https://serviceworkies.com/&#34;&gt;Service Workies&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.freecodecamp.org/news/test-driven-development-tutorial-how-to-test-javascript-and-reactjs-app/&#34;&gt;Good article on testing.&lt;/a&gt; This covers TDD and stuff&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts&#34;&gt;Asynchronous programming in JS&lt;/a&gt;&#xA;used by all modern applications.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs&#34;&gt;Client side web APIs&lt;/a&gt;&#xA;tells how to use JS for your page. Pre-requisite for JS frameworks (I think).&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop&#34;&gt;Event Loop&lt;/a&gt;&#xA;is how JS is executed in the browser. This seems important to know how JS actually executes.&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&#34;&gt;Arrays for binary data&lt;/a&gt;&#xA;is how you deal with raw data. Sounds fun!&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.freecodecamp.org/news/execution-context-how-javascript-works-behind-the-scenes&#34;&gt;Execution contexts in JS&lt;/a&gt;&#xA;explains how the browser engine processes your scripts.&lt;/li&gt;&#xA;&lt;li&gt;Practise here : &#xA;  &lt;a href=&#34;https://www.frontendmentor.io/challenges&#34;&gt;https://www.frontendmentor.io/challenges&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;java&#34;&gt;&#xA;  Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jvm section&lt;/li&gt;&#xA;&lt;li&gt;modules section&lt;/li&gt;&#xA;&lt;li&gt;web server section&lt;/li&gt;&#xA;&lt;li&gt;spring boot section - there&amp;rsquo;s a LOT here&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sre-principles&#34;&gt;&#xA;  SRE principles&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sre-principles&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I would like to ensure that systems run reliabily and handle errors gracefully.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/credits</title>
      <link>https://work.rehanvipin.me/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/credits/</guid>
      <description>&lt;h1 id=&#34;credits&#34;&gt;&#xA;  Credits&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#credits&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Built with &#xA;  &lt;a href=&#34;https://gohugo.io&#34;&gt;HUGO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Uses the &#xA;  &lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34;&gt;hugo-book theme&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://icons8.com/icon/80406/compass&#34;&gt;Compass&lt;/a&gt; icon by &#xA;  &lt;a href=&#34;https://icons8.com&#34;&gt;Icons8&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You can find the source for this site on &#xA;  &lt;a href=&#34;https://github.com/coconutlad/work&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A small guide to shortcodes within this theme:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&lt;a  href=&#34;https://work.rehanvipin.me/shortcodes/&#34;   class=&#34;book-btn&#34;&gt;&#xA;  Theme Guide&#xA;&lt;/a&gt;</description>
    </item>
    <item>
      <title>theme-guide</title>
      <link>https://work.rehanvipin.me/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/shortcodes/</guid>
      <description>&lt;h1 id=&#34;buttons&#34;&gt;&#xA;  Buttons&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#buttons&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Buttons are styled links that can lead to local page or external link.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relref&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Get Home&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Contribute&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&lt;a  href=&#34;https://work.rehanvipin.me/&#34;   class=&#34;book-btn&#34;&gt;&#xA;  Get Home&#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;&#xA;&#xA;&lt;a  href=&#34;https://github.com/alex-shpak/hugo-book&#34;   target=&#34;_blank&#34;  class=&#34;book-btn&#34;&gt;&#xA;  Contribute&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;columns&#34;&gt;&#xA;  Columns&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#columns&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Columns help organize shorter pieces of content horizontally for readability.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; &lt;span style=&#34;color:#f92672&#34;&gt;columns&lt;/span&gt; &amp;gt;}} &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- begin columns block --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Left Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Mid Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Right Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; /&lt;span style=&#34;color:#f92672&#34;&gt;columns&lt;/span&gt; &amp;gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-1&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h2 id=&#34;left-content&#34;&gt;&#xA;  Left Content&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#left-content&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&#xA;protulit, sed sed aere valvis inhaesuro Pallas animam: qui &lt;em&gt;quid&lt;/em&gt;, ignes.&#xA;Miseratus fonte Ditis conubia.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
