<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Field Manual</title>
    <link>https://work.rehanvipin.me/</link>
    <description>Recent content in Introduction on Field Manual</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://work.rehanvipin.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3</title>
      <link>https://work.rehanvipin.me/misc/d3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/d3/</guid>
      <description>&lt;h1 id=&#34;data-driven-docs&#34;&gt;&#xA;  Data Driven Docs?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-driven-docs&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a powerful library with a bit of a learning curve.&lt;/p&gt;&#xA;&lt;p&gt;There a heck lot of things it can do. Nice confusion.&#xA;These might be some good resources:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.d3indepth.com/&#34;&gt;An updated D3 tutorial&lt;/a&gt; (This was the best!)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://observablehq.com/@d3/learn-d3&#34;&gt;Official tutorial&lt;/a&gt;&#xA;(It can take some time to get used to observableHQ&amp;rsquo;s notebooks)&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://github.com/d3/d3/wiki/Tutorials&#34;&gt;Huge collection of tutorials&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://wattenberger.com/blog/d3#intro&#34;&gt;https://wattenberger.com/blog/d3#intro&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;[SUGGESTION]: Do the d3indepth tutorial first and practise a bit by trying to make your own visualizations.&#xA;The other resources can be useful when you&amp;rsquo;re stuck.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview</title>
      <link>https://work.rehanvipin.me/angular/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/overview/</guid>
      <description>&lt;h1 id=&#34;an-overview-and-miscellaneous-stuff&#34;&gt;&#xA;  An overview (and miscellaneous stuff)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#an-overview-and-miscellaneous-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Angular is a platform, &#xA;  &lt;a href=&#34;https://angular.io/guide/what-is-angular&#34;&gt;apparently&lt;/a&gt;, that includes a framework, some libraries, and developer tools to work with all of that. For most purposes, it&amp;rsquo;s called a front-end web development framework.&lt;/p&gt;&#xA;&lt;h2 id=&#34;typescript&#34;&gt;&#xA;  Typescript&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#typescript&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Angular uses TS. It&amp;rsquo;s a superset of JS that compiles to JS. You can adding typing via syntactic sugar which helps catch bugs when you compile. It also has editor plugins for the same. You can try it out &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/play&#34;&gt;online&lt;/a&gt;. Its main features are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup</title>
      <link>https://work.rehanvipin.me/java/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/intro/</guid>
      <description>&lt;h1 id=&#34;introduction--dev-setup&#34;&gt;&#xA;  Introduction &amp;amp; Dev Setup&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction--dev-setup&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-is-the-java-platform&#34;&gt;&#xA;  What is the Java platform?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-the-java-platform&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The Java compiler, which defines what the Java language is and converts it to bytecode.&#xA;Also a bunch of other tools which can help in development e.g., tools to inspect / decompile files.&lt;/li&gt;&#xA;&lt;li&gt;The Java Virtual Machine which executes the bytecode on the computer.&#xA;This along with the classes required to run the program (i.e., standard libraries) is called the Java Runtime Environment.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These two together make up the Java Development Kit, which is required to write and execute Java programs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Framework</title>
      <link>https://work.rehanvipin.me/spring-boot/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/spring-boot/framework/</guid>
      <description>&lt;h1 id=&#34;spring-framework&#34;&gt;&#xA;  Spring Framework&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#spring-framework&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;what-why-would-you-use-it&#34;&gt;&#xA;  What? Why would you use it?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-why-would-you-use-it&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;It is a dependency injection framework that helps you simplify your code and make it more testable.&#xA;It started as an alternative to Java 2 EE and has now grown beyond it.&#xA;It even includes a web framework (Web MVC) within it.&#xA;Baked in with best practices so you can focus on the business problem.&lt;/p&gt;&#xA;&lt;p&gt;It encourages you to use interfaces and helps minimize configuration code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Components</title>
      <link>https://work.rehanvipin.me/angular/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/components/</guid>
      <description>&lt;h1 id=&#34;the-real-content&#34;&gt;&#xA;  The real CONTENT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-real-content&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Fun fact: The &lt;code&gt;@Component&lt;/code&gt; decorator actually extends &lt;code&gt;@Directive&lt;/code&gt; decorator because components are &lt;em&gt;technically&lt;/em&gt; directives.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A bare component is a class, defined in a .ts file. You can create new one like this:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Create a &lt;code&gt;.ts&lt;/code&gt; file and export a class that is decorated by &lt;code&gt;Component&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;. The decorator takes in an object as argument.&#xA;The object has properties like &lt;code&gt;selector&lt;/code&gt; (which is a CSS selector to find out which HTML elements this component should apply to) and &lt;code&gt;template&lt;/code&gt; (or &lt;code&gt;templateUrl&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Import this class in &lt;code&gt;app.module.ts&lt;/code&gt; and add it to declarations in the &lt;code&gt;NgModule&lt;/code&gt; decorator of AppModule.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Data binding: Accessing the component&amp;rsquo;s properties within its template via the &lt;code&gt;{{ any JS expression }}&lt;/code&gt; syntax.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mods &amp; Packs</title>
      <link>https://work.rehanvipin.me/java/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/modules/</guid>
      <description>&lt;h1 id=&#34;modules--packages&#34;&gt;&#xA;  Modules &amp;amp; Packages&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#modules--packages&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How is java code bundled up to be shared?&#xA;Previously it was through packages and classpath.&#xA;After &#xA;  &lt;a href=&#34;https://www.baeldung.com/project-jigsaw-java-modularity&#34;&gt;project jigsaw&lt;/a&gt;, it is through modules.&lt;/p&gt;&#xA;&lt;p&gt;What are they? How are they different?&lt;/p&gt;&#xA;&lt;p&gt;Good resources for the same:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/packages/&#34;&gt;https://dev.java/learn/packages/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/modules/&#34;&gt;https://dev.java/learn/modules/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://dev.java/learn/jlink/&#34;&gt;https://dev.java/learn/jlink/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://work.rehanvipin.me/misc/typescript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/typescript/</guid>
      <description>&lt;h1 id=&#34;write-javascript-with-confidence&#34;&gt;&#xA;  Write JavaScript with confidence&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#write-javascript-with-confidence&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The docs are good. Check them out: &#xA;  &lt;a href=&#34;https://www.typescriptlang.org/docs/&#34;&gt;https://www.typescriptlang.org/docs/&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;some-notes&#34;&gt;&#xA;  Some notes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#some-notes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;declare a&lt;/code&gt; in TS is used to tell the compiler that the variable a is declared somewhere else and it&amp;rsquo;s&#xA;usage in this file should not throw an error.&#xA;(e.g. it&amp;rsquo;s declared in another file and both of them are used via script tags in HTML)&lt;/p&gt;&#xA;&lt;p&gt;Any definitions in a class declaration are moved to the constructor when the code is transpiled to JS.&#xA;The code is also moved to the top of the constructor so that the constructor code can use the defined values.&#xA;e.g.&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h3 id=&#34;ts&#34;&gt;&#xA;  TS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LOL&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wow this is cool&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wow&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bongo cats&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h3 id=&#34;compiled-js&#34;&gt;&#xA;  Compiled JS&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#compiled-js&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LOL&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bob&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wow this is cool&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bongo cats&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wow&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;  &#xA;&lt;/div&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVM</title>
      <link>https://work.rehanvipin.me/java/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/jvm/</guid>
      <description>&lt;h1 id=&#34;the-java-virtual-machine&#34;&gt;&#xA;  The Java Virtual Machine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-java-virtual-machine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;It executes the bytecode apparently.&lt;/p&gt;&#xA;&lt;p&gt;Learn more about it&amp;rsquo;s internals through these courses:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/understanding-java-vm-memory-management/table-of-contents&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/understanding-java-vm-class-loading-reflection/table-of-contents&#34;&gt;Class Loading&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Template Syntax</title>
      <link>https://work.rehanvipin.me/angular/template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/template/</guid>
      <description>&lt;h1 id=&#34;the-template-syntax&#34;&gt;&#xA;  The template syntax&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#the-template-syntax&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The template builds the HTML content that is displayed for a component. It is HTML with some Angular template syntax which lets you make the component reusable.&lt;/p&gt;&#xA;&lt;p&gt;There are HTML attributes and there are DOM properties. Sometimes there&amp;rsquo;s a one-one mapping between them,&#xA;sometimes an attribute exists but has no corresponding property and vice-versa.&lt;/p&gt;&#xA;&lt;details &gt;&#xA;  &lt;summary&gt;Binding in HTML&lt;/summary&gt;&#xA;  &lt;div class=&#34;markdown-inner&#34;&gt;&#xA;    &lt;h2 id=&#34;js-in-html&#34;&gt;&#xA;  JS in HTML?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#js-in-html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;There are multiple ways you can use JS objects in HTML. Two of them are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tips &amp; Tricks</title>
      <link>https://work.rehanvipin.me/misc/tips-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/tips-tricks/</guid>
      <description>&lt;h1 id=&#34;tips-tricks-and-resources&#34;&gt;&#xA;  Tips, tricks, and resources&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tips-tricks-and-resources&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Modern JS has many inbuilt features, not all of them are so well known.&#xA;&#xA;  &lt;a href=&#34;https://2022.stateofjs.com/en-US/features/language/&#34;&gt;Check them out, from the stateOfJS22&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Good resource &amp;amp; book on how to design modern web apps: &#xA;  &lt;a href=&#34;https://www.patterns.dev/&#34;&gt;https://www.patterns.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variable hoisting was an unintended addition that came along with function hoisting when JS was&#xA;being developed. Hoisting is done by the two-scan interpreter. The first scan is to find declarations.&#xA;This &#xA;  &lt;a href=&#34;https://stackoverflow.com/questions/15005098/why-does-javascript-hoist-variables&#34;&gt;stackoverflow q&amp;amp;a&lt;/a&gt; has some good answers.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s no concept of &amp;ldquo;initialization&amp;rdquo; in JS.&#xA;There is declaration (&lt;code&gt;let a&lt;/code&gt;) and there is assignment (&lt;code&gt;a = 2&lt;/code&gt;).&#xA;&amp;ldquo;Definition&amp;rdquo; is just syntax sugar to do both declaration and assignment at once.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;typeof null&lt;/code&gt; evaluates to &lt;code&gt;&#39;object&#39;&lt;/code&gt; in JS. &#xA;  &lt;a href=&#34;http://crockford.com/javascript/remedial.html&#34;&gt;Which is a bug apparently&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;While writing the CSS for a site, it&amp;rsquo;s a good idea to write it mobile first and then add&#xA;media queries for the larger screen sizes. It leads to less CSS. Even if the design was desktop based.&lt;/li&gt;&#xA;&lt;li&gt;JS has so many inbuilt things. &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;Proxy&lt;/a&gt; is one of them.&lt;/li&gt;&#xA;&lt;li&gt;Want to know if you&amp;rsquo;ve covered all best-practices and stuff for your web app?&#xA;There&amp;rsquo;s a nice &#xA;  &lt;a href=&#34;https://frontendchecklist.io&#34;&gt;checklist&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;A book about building &#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal&#34;&gt;web apps&lt;/a&gt; by Basecamp. It&amp;rsquo;s good apparently.&#xA;&#xA;  &lt;a href=&#34;https://basecamp.com/gettingreal/getting-real.pdf&#34;&gt;PDF&lt;/a&gt; also available.&lt;/li&gt;&#xA;&lt;li&gt;Confused about what units to use in CSS? &#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=N5wpD9Ov_To&#34;&gt;Check out this video by Kevin Powell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use &lt;code&gt;rem&lt;/code&gt; (i.e., root el) for fonts and most other things. It&amp;rsquo;s relative to the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; (which is 16px by default)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the element it is on or the closest parent which has defined a font size. When it&amp;rsquo;s used for some other property, it only references this element&amp;rsquo;s font-size. It can be useful for padding and margins.&lt;/li&gt;&#xA;&lt;li&gt;Use percentages for &lt;code&gt;width&lt;/code&gt; (prefer to use &lt;code&gt;max-width&lt;/code&gt;) or &lt;code&gt;ch&lt;/code&gt; (equal to width of a char) when operating on a text container&lt;/li&gt;&#xA;&lt;li&gt;Think twice before setting &lt;code&gt;height&lt;/code&gt;. Try to set &lt;code&gt;min-height&lt;/code&gt; if it is really needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Try to keep text confined to 60 chars a row.&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s an &lt;strong&gt;open source&lt;/strong&gt; design tool: &#xA;  &lt;a href=&#34;https://penpot.app&#34;&gt;Penpot&lt;/a&gt; which focuses on web standards&lt;/li&gt;&#xA;&lt;li&gt;The word &amp;ldquo;JavaScript&amp;rdquo; is trademarked by Oracle (&#xA;  &lt;a href=&#34;https://tinyclouds.org/trademark&#34;&gt;https://tinyclouds.org/trademark&lt;/a&gt;) as of Sept. 2022&lt;/li&gt;&#xA;&lt;li&gt;An easy way to locally deploy the built application is to run: &lt;code&gt;python -m http.server --bind localhost 8080&lt;/code&gt; which serves the current directory at &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;There&amp;rsquo;s a slight imperfection in the microsoft logo on black backgrounds&#xA;where the red box seems to appear larger than the blue box below it. This is due to the way pixels&#xA;are arranged in a display. &#xA;  &lt;a href=&#34;https://www.avforums.com/threads/anyone-else-have-an-offset-blue-and-red-square-on-the-microsoft-logo-of-office-2019.2310709/&#34;&gt;See it in more detail here&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Want to see what are the new features in es6 and how many of them could be done in previous versions? This &#xA;  &lt;a href=&#34;http://es6-features.org/#Constants&#34;&gt;website&lt;/a&gt; lets you do that.&lt;/li&gt;&#xA;&lt;li&gt;Reference for JavaScript and some practice exercises : &#xA;  &lt;a href=&#34;https://wesbos.com/javascript&#34;&gt;https://wesbos.com/javascript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Browsers now have better client side functioning capabilities. Such as &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API&#34;&gt;a proper DB&lt;/a&gt;, &#xA;  &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/File_System_API/Origin_private_file_system&#34;&gt;virtualfile system&lt;/a&gt;, and even &#xA;  &lt;a href=&#34;https://webcontainers.io/&#34;&gt;running full programs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Build tools</title>
      <link>https://work.rehanvipin.me/java/build_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/build_tools/</guid>
      <description>&lt;h1 id=&#34;building-java-code&#34;&gt;&#xA;  Building Java code&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#building-java-code&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Why not just use &lt;code&gt;javac&lt;/code&gt; ? Well, you can but tools save time because there could be:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Many Java files that need to be compiled for the main file.&lt;/li&gt;&#xA;&lt;li&gt;Incremental builds, building only the classes whose code has changed.&lt;/li&gt;&#xA;&lt;li&gt;External dependencies that need to be fetched. (Transitive dependencies! Versions!)&lt;/li&gt;&#xA;&lt;li&gt;Package code into a &lt;code&gt;.jar&lt;/code&gt; or &lt;code&gt;.jmod&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;Custom arguments for compiling certain classes ?&lt;/li&gt;&#xA;&lt;li&gt;Custom arguments for running the tests.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is what tools like &lt;code&gt;maven&lt;/code&gt; and &lt;code&gt;gradle&lt;/code&gt; try to solve.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript execution</title>
      <link>https://work.rehanvipin.me/misc/js-execution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/js-execution/</guid>
      <description>&lt;h1 id=&#34;how-does-js-run-in-the-browser--node&#34;&gt;&#xA;  How does JS run in the browser &amp;amp; node?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#how-does-js-run-in-the-browser--node&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;If you prefer visuals over text, these talks are really good (videos aren&amp;rsquo;t mine):&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;WTH is the Event Loop?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=u1kqx6AenYw&#34;&gt;Further Adventures of the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.youtube.com/watch?v=cCOL7MC4Pl0&#34;&gt;Jake Archibald on the Event Loop&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;&#xA;  Overview&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The v8 runtime provides a &lt;strong&gt;call stack&lt;/strong&gt; and heap.&#xA;Then in the browser, we have the WebAPIs, which provides FUNctions which can make code execute elsewhere.&#xA;We have :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Services</title>
      <link>https://work.rehanvipin.me/angular/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/services/</guid>
      <description>&lt;h1 id=&#34;services-do-stuff&#34;&gt;&#xA;  Services (do STUFF)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#services-do-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They are classes where you can put business logic for components. They should be specific. Components and services should be as reusable as possible. This is a good, short read about them: &#xA;  &lt;a href=&#34;https://angular.io/guide/architecture-services&#34;&gt;Services and DI&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;According to that page linked above:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You usually create one in a &lt;code&gt;.service.ts&lt;/code&gt; file. It is an exported class with functions which perform the required business actions. It can then be &lt;strong&gt;injected&lt;/strong&gt; into the required classes. It might depend on other services too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Directives</title>
      <link>https://work.rehanvipin.me/angular/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/directives/</guid>
      <description>&lt;h1 id=&#34;directives-hmmm-&#34;&gt;&#xA;  Directives: Hmmm &amp;hellip;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#directives-hmmm-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These are just classes that add extra behavior to elements ~ Angular docs.&lt;/p&gt;&#xA;&lt;p&gt;Components are represented in HTML as elements. Directives are represented as attributes on those elements. A directive can also be applied on a simple HTML element, not just components.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-them&#34;&gt;&#xA;  Creating them&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-them&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can create a directive class in a file like &lt;code&gt;nice.directive.ts&lt;/code&gt; like so:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;OnInit&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Directive&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// CSS style selector e.g. [nice-stuff]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// the HTML would be like &amp;lt;somecomp nice-stuff&amp;gt;&amp;lt;/somecomp&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NiceDirective&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;They need to be added to the declaration section of the ngModule where they will be used. They can get a reference to the element they were used on via the &lt;code&gt;ElementRef&lt;/code&gt; service which can be added as a dependency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web App Architecture</title>
      <link>https://work.rehanvipin.me/misc/web-app-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/web-app-arch/</guid>
      <description>&lt;h1 id=&#34;overall-design-between-browser--server&#34;&gt;&#xA;  Overall design between browser &amp;amp; server&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overall-design-between-browser--server&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How do you serve content to a user in 2024?&#xA;Well, the ways I know of are &amp;hellip;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Django, or Flask (what architectres do these promote? MVC?)&lt;/li&gt;&#xA;&lt;li&gt;Spring Boot &amp;amp; React (Single Page Apps. MVVM apparently??)&lt;/li&gt;&#xA;&lt;li&gt;Next.js (and other SSR)&lt;/li&gt;&#xA;&lt;li&gt;Hugo (Static Site Gen)&lt;/li&gt;&#xA;&lt;li&gt;Rails (MVC)&lt;/li&gt;&#xA;&lt;li&gt;Cloudflare web workers (the &amp;ldquo;serverless&amp;rdquo; design)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;architectures&#34;&gt;&#xA;  Architectures&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#architectures&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mvc&#34;&gt;&#xA;  MVC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mvc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Model View Controller.&#xA;Lots of strong opinions about this.&#xA;Apparently, there are no MVC frameworks, but just apps which implement the MVC architecture pattern.&#xA;That might be an over-simplification. There could be frameworks which make it easy to do MVC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Server</title>
      <link>https://work.rehanvipin.me/java/web-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/java/web-server/</guid>
      <description>&lt;h1 id=&#34;sharing-stuff-to-browsers&#34;&gt;&#xA;  Sharing stuff to browsers&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sharing-stuff-to-browsers&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Sure, you can use Spring MVC and others, but what about using something more low-level.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Jetty Server&lt;/li&gt;&#xA;&lt;li&gt;Jetty Servlet (to handle requests)&lt;/li&gt;&#xA;&lt;li&gt;Apache CXF (to implement REST APIs, compliant with JAX-RS)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;  &lt;a href=&#34;https://www.baeldung.com/jetty-embedded&#34;&gt;https://www.baeldung.com/jetty-embedded&lt;/a&gt;&#xA;&#xA;  &lt;a href=&#34;https://www.baeldung.com/introduction-to-apache-cxf&#34;&gt;https://www.baeldung.com/introduction-to-apache-cxf&lt;/a&gt;&#xA;&#xA;  &lt;a href=&#34;https://www.baeldung.com/rest-api-jax-rs-vs-spring&#34;&gt;https://www.baeldung.com/rest-api-jax-rs-vs-spring&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://work.rehanvipin.me/angular/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/routing/</guid>
      <description>&lt;h1 id=&#34;routing--co&#34;&gt;&#xA;  Routing &amp;amp; Co.&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#routing--co&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Some modern apps, like the one built with Angular are &lt;strong&gt;Single Page Apps&lt;/strong&gt;. They only load one HTML file from the server (index.html mostly) and then use JS to fetch new content and change parts of the page as the user navigates the site. It behaves like a regular sites in all aspects (look at the address bar) while being more efficient!&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-routes&#34;&gt;&#xA;  Creating routes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-routes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Routes are defined as an array of objects. The array is of the type &lt;code&gt;Routes&lt;/code&gt; from &amp;ldquo;@angular/router&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Web Authentication</title>
      <link>https://work.rehanvipin.me/misc/web-auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/misc/web-auth/</guid>
      <description>&lt;h1 id=&#34;authentication-in-web-services&#34;&gt;&#xA;  Authentication in web services&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#authentication-in-web-services&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;How does an application figure out who is talking to it? What part of the identity of that person / system is enough?&lt;/p&gt;&#xA;&lt;p&gt;e-mails &amp;amp; passwords are one way. WebAuthn is another.&#xA;kerberos is a good option inside an enterprise. it provides a convenient SSO experience when combined with SPNEGO.&#xA;session tokens passed on as cookies can also work depending on the use case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forms</title>
      <link>https://work.rehanvipin.me/angular/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/forms/</guid>
      <description>&lt;h1 id=&#34;forms-and-validation&#34;&gt;&#xA;  Forms and validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#forms-and-validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;There are two kinds of forms in Angular:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Template based (the content and the logic is in the HTML)&lt;/li&gt;&#xA;&lt;li&gt;Model based A.K.A. Reactive (the content and logic is in the component)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;creating-a-form&#34;&gt;&#xA;  Creating a form&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#creating-a-form&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You need the &lt;code&gt;FormModule&lt;/code&gt; from &amp;ldquo;@angular/forms&amp;rdquo; to be imported in the module where you will be using forms.&lt;/li&gt;&#xA;&lt;li&gt;When you import that module, it adds an NgForm directive to all form tags.&#xA;The directive instance can be accessed as described below.&lt;/li&gt;&#xA;&lt;li&gt;In the component with the form, on the form element, set a template reference variable like so: &lt;code&gt;&amp;lt;form #someNiceNameForForm=&amp;quot;ngForm&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;.&#xA;This provides additional functionality as &#xA;  &lt;a href=&#34;https://angular.io/guide/template-reference-variables#using-ngform-with-template-variables&#34;&gt;described in the docs&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For each input element whose value you want, set the &lt;code&gt;name&lt;/code&gt; attribute. This will be the key to access its value later on.&lt;/li&gt;&#xA;&lt;li&gt;For the submit action, prefer to bind to ngSubmit instead of using the submit button, like so: &lt;code&gt;&amp;lt;form #formTempVar=&amp;quot;ngForm&amp;quot; (ngSubmit)=&amp;quot;handlerFunc(formTempVar.value)&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;value&lt;/code&gt; prop. on the temp-ref-var is an object where the value for each input field with a name attr. is available.&lt;/li&gt;&#xA;&lt;li&gt;You can also bind &lt;code&gt;ngModel&lt;/code&gt; (which is a directive) on each input element to bind it to values&#xA;on the component, like so: &lt;code&gt;&amp;lt;input (ngModel)=&amp;quot;compoProp&amp;quot; id=&amp;quot;foo&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;.&#xA;To achieve &lt;strong&gt;two way data binding&lt;/strong&gt; you can do this: &lt;code&gt;[(ngModel)]=&amp;quot;compoProp&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;validation&#34;&gt;&#xA;  Validation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#validation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Angular turns off the default behaviour of adding the &amp;ldquo;required&amp;rdquo; attribute on input elements. It does provide its own validation features:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pipes</title>
      <link>https://work.rehanvipin.me/angular/pipes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/pipes/</guid>
      <description>&lt;h1 id=&#34;transforming-data&#34;&gt;&#xA;  Transforming data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#transforming-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;built-in-pipes&#34;&gt;&#xA;  Built-in pipes&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#built-in-pipes&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;You can transform data before it is rendered in a template. There are many &#xA;  &lt;a href=&#34;https://angular.io/api/common#pipes&#34;&gt;inbuilt pipes&lt;/a&gt;. The format is &lt;code&gt;{{ yourContent | pipeName:pipeArg1 }}&lt;/code&gt; where the arguments are JS objects / literals and are optional. Example: &lt;code&gt;&amp;lt;p&amp;gt;A: {{a | currency:&#39;CAD&#39;:&#39;code&#39;}}&amp;lt;/p&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;custom-pipe&#34;&gt;&#xA;  Custom pipe&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#custom-pipe&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;An example pipe:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// in the file goodie.pipe.ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;Pipe&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Pipe&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goodiepipe&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// the name used to call the pipe in the template&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GoodiePipe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PipeTransform&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// this is the function that is called with the args&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is low&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; is high&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must then add it to the &lt;code&gt;declarations&lt;/code&gt; of the NgModule where you want to use it. It can then be used like so: &lt;code&gt;{{ someVar | goodpipe:32 }}&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection</title>
      <link>https://work.rehanvipin.me/angular/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/di/</guid>
      <description>&lt;h1 id=&#34;adding-features-&#34;&gt;&#xA;  Adding features! 🙌&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#adding-features-&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;dependency-injection&#34;&gt;&#xA;  Dependency injection&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dependency-injection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is how you provide new components with extra resources they need to function. To indicate that a class (&lt;strong&gt;any class&lt;/strong&gt;, not just a component / service) has a dependency or is a dependency you decorate it with &lt;code&gt;@Injectable()&lt;/code&gt;. From the docs&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The injector is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don&amp;rsquo;t have to create injectors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxJS</title>
      <link>https://work.rehanvipin.me/angular/rxjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/rxjs/</guid>
      <description>&lt;h1 id=&#34;async--network-stuff&#34;&gt;&#xA;  Async &amp;amp; network stuff&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#async--network-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Not everything happens right at once in a webapp. It shouldn&amp;rsquo;t wait for certain events when it can execute other things. This is where asynchronous processing is useful. Promises were the preferred way to do it but now there are observables (from rxjs). Promises represent &lt;strong&gt;one event that happens in the future&lt;/strong&gt; while observables represent &lt;strong&gt;zero or more events that could happen synchronously or in the future&lt;/strong&gt;. This particular section is about RxJS and HTTP in Angular.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://work.rehanvipin.me/angular/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/test/</guid>
      <description>&lt;h1 id=&#34;unit--integrated-tests&#34;&gt;&#xA;  Unit &amp;amp; Integrated tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit--integrated-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;NOTE : Check the &#xA;  &lt;a href=&#34;https://angular.dev/guide/testing/utility-apis&#34;&gt;reference doc&lt;/a&gt; regarding&#xA;Testing APIs for Angular .&lt;/p&gt;&#xA;&lt;p&gt;Angular uses Jasmine for unit testing and Karma to run the tests on browsers. Tests can be:&lt;/p&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;isolated&#34;&gt;&#xA;  Isolated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#isolated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only tests the JS class not the component&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for services and pipes&lt;/li&gt;&#xA;&lt;li&gt;Need to create instances of classes on your own&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h4 id=&#34;integrated&#34;&gt;&#xA;  Integrated&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#integrated&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tests the class and template together&lt;/li&gt;&#xA;&lt;li&gt;Mostly used for components and directives&lt;/li&gt;&#xA;&lt;li&gt;The objects are created by the framework&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;  &#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;unit-tests&#34;&gt;&#xA;  Unit tests&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#unit-tests&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;They test a single unit (like a class, function, or a bunch of classes) in isolation. Some features of unit tests:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libraries</title>
      <link>https://work.rehanvipin.me/angular/libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/libraries/</guid>
      <description>&lt;h1 id=&#34;ultra-level-reusability&#34;&gt;&#xA;  Ultra level reusability&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#ultra-level-reusability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;They provide extra functionality to Angular.&#xA;They don&amp;rsquo;t run on their own. They need to be used in an application.&#xA;There are many first party libraries that are regularly used, like &amp;ldquo;@angular/forms&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Angular libraries (e.g. the @angular/x ones) are &lt;code&gt;NgModules&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some functionality of an app can be packaged into a library so it can be reused with other apps.&#xA;They can then be published in &amp;ldquo;npm&amp;rdquo; or wherever.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactivity with Signals</title>
      <link>https://work.rehanvipin.me/angular/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/angular/signals/</guid>
      <description>&lt;h1 id=&#34;signals&#34;&gt;&#xA;  Signals&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#signals&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Apparently, it is used to make Angular apps more responsive and improve Change Detection.&lt;/p&gt;&#xA;&lt;p&gt;Signals can be thought of as a combination of state and a notification mechanism.&lt;/p&gt;&#xA;&lt;p&gt;How is that different from RxJS observables?&#xA;Observables are a notification mechanism for &lt;em&gt;events&lt;/em&gt; and don&amp;rsquo;t really hold state. What about Subjects then??&lt;/p&gt;&#xA;&lt;p&gt;It is still recommeneded to use RxJS for asynchronous event handling.&lt;/p&gt;&#xA;&lt;h2 id=&#34;simple-uses&#34;&gt;&#xA;  Simple uses&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#simple-uses&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;They can be created in the component like so: &lt;code&gt;const newSig = signal&amp;lt;TypeOrLetItBeInferred&amp;gt;(defaultValue)&lt;/code&gt;. The default value is a must.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/tmp</title>
      <link>https://work.rehanvipin.me/tmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/tmp/</guid>
      <description>&lt;h1 id=&#34;temporary-code-access&#34;&gt;&#xA;  Temporary code access&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#temporary-code-access&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Random stuff that doesn&amp;rsquo;t fit anywhere else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/next</title>
      <link>https://work.rehanvipin.me/whatnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/whatnext/</guid>
      <description>&lt;h1 id=&#34;so-much-to-learn&#34;&gt;&#xA;  So much to learn&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#so-much-to-learn&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;These sound useful:&lt;/p&gt;&#xA;&lt;h2 id=&#34;webdev-stuff&#34;&gt;&#xA;  WebDev stuff&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#webdev-stuff&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Search for &amp;ldquo;TODO&amp;rdquo; in notes and do those parts&lt;/li&gt;&#xA;&lt;li&gt;RxJS and Angular Signals from this &#xA;  &lt;a href=&#34;https://app.pluralsight.com/library/courses/rxjs-angular-signals-fundamentals/table-of-contents&#34;&gt;course&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;The ExpressionChangedAfterItHasBeenCheckedError. Couple of articles &#xA;  &lt;a href=&#34;https://angularindepth.com/posts/1001/everything-you-need-to-know-about-the-expressionchangedafterithasbeencheckederror-error&#34;&gt;one&lt;/a&gt; and &#xA;  &lt;a href=&#34;https://angularindepth.com/posts/1514/deep-dive-into-the-infamous-expressionchangedafterithasbeencheckederror-in-angular&#34;&gt;two&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;About change detection in Angular. &#xA;  &lt;a href=&#34;https://angularindepth.com/posts/1512/change-detection-and-component-trees-in-angular-applications&#34;&gt;one&lt;/a&gt; and &#xA;  &lt;a href=&#34;https://angularindepth.com/posts/1509/overview-of-angulars-change-detection-operations-in-ivy&#34;&gt;two&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Angular router - &#xA;  &lt;a href=&#34;https://blog.angular-university.io/angular2-router/&#34;&gt;https://blog.angular-university.io/angular2-router/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;What really is ngModule - &#xA;  &lt;a href=&#34;https://blog.angular-university.io/angular2-ngmodule/&#34;&gt;https://blog.angular-university.io/angular2-ngmodule/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;How do service workers work? &#xA;  &lt;a href=&#34;https://serviceworkies.com/&#34;&gt;Service Workies&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://www.freecodecamp.org/news/test-driven-development-tutorial-how-to-test-javascript-and-reactjs-app/&#34;&gt;Good article on testing.&lt;/a&gt; This covers TDD and stuff&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;java&#34;&gt;&#xA;  Java&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#java&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jvm section&lt;/li&gt;&#xA;&lt;li&gt;modules section&lt;/li&gt;&#xA;&lt;li&gt;web server section&lt;/li&gt;&#xA;&lt;li&gt;spring boot section - there&amp;rsquo;s a LOT here&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;sre-principles&#34;&gt;&#xA;  SRE principles&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sre-principles&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;I would like to ensure that systems are built reliability and handle&#xA;errors gracefully.&lt;/p&gt;</description>
    </item>
    <item>
      <title>/credits</title>
      <link>https://work.rehanvipin.me/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/credits/</guid>
      <description>&lt;h1 id=&#34;credits&#34;&gt;&#xA;  Credits&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#credits&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Built with &#xA;  &lt;a href=&#34;https://gohugo.io&#34;&gt;HUGO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Uses the &#xA;  &lt;a href=&#34;https://github.com/alex-shpak/hugo-book&#34;&gt;hugo-book theme&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://icons8.com/icon/80406/compass&#34;&gt;Compass&lt;/a&gt; icon by &#xA;  &lt;a href=&#34;https://icons8.com&#34;&gt;Icons8&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You can find the source for this site on &#xA;  &lt;a href=&#34;https://github.com/coconutlad/work&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A small guide to shortcodes within this theme:&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&lt;a  href=&#34;https://work.rehanvipin.me/shortcodes/&#34;   class=&#34;book-btn&#34;&gt;&#xA;  Theme Guide&#xA;&lt;/a&gt;</description>
    </item>
    <item>
      <title>theme-guide</title>
      <link>https://work.rehanvipin.me/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://work.rehanvipin.me/shortcodes/</guid>
      <description>&lt;h1 id=&#34;buttons&#34;&gt;&#xA;  Buttons&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#buttons&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Buttons are styled links that can lead to local page or external link.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relref&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Get Home&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;Contribute&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&lt;a  href=&#34;https://work.rehanvipin.me/&#34;   class=&#34;book-btn&#34;&gt;&#xA;  Get Home&#xA;&lt;/a&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;&#xA;&#xA;&lt;a  href=&#34;https://github.com/alex-shpak/hugo-book&#34;   target=&#34;_blank&#34;  class=&#34;book-btn&#34;&gt;&#xA;  Contribute&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;columns&#34;&gt;&#xA;  Columns&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#columns&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Columns help organize shorter pieces of content horizontally for readability.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; &lt;span style=&#34;color:#f92672&#34;&gt;columns&lt;/span&gt; &amp;gt;}} &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- begin columns block --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Left Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Mid Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;---&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- magic separator, between columns --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Right Content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lorem markdownum insigne...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&amp;lt; /&lt;span style=&#34;color:#f92672&#34;&gt;columns&lt;/span&gt; &amp;gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-1&#34;&gt;&#xA;  Example&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;  &#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;h2 id=&#34;left-content&#34;&gt;&#xA;  Left Content&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#left-content&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat&#xA;stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa&#xA;protulit, sed sed aere valvis inhaesuro Pallas animam: qui &lt;em&gt;quid&lt;/em&gt;, ignes.&#xA;Miseratus fonte Ditis conubia.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
